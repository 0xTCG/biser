MIN_SCORE = -((1 << 32) - 1)

class PrioritySearchTree[T]:
  """
  A static binary search tree for weighted items (points).
  At the beginning, each point is deactivated and its weight (score) is set to -INF.

  The following operations can be performed efficiently with this structure:
    - activate a point (assign it a score);
    - deactivate a point (assign its score to -INF);
    - find a point;
    - find an active point with the highest score in the given interval.

  Priority search tree is initialized with the (unsorted) list of points.
  Each leaf in the tree corresponds to a point in the original list.
  """

  anchors: List[T]  # anchors[i].x
  score: List[int]  # anchors[i].score after sort
  """ Score of each point; -INF for non-leaves and deactivated points """

  h: List[T]  # or: x
  """ Coordinate of each point; -1 for non-leaves """
  a: List[int]  # or: max_x
  """ Index of a leaf with the highest coordinate in the subtree """
  p: List[int]  # or: max_score
  """
  Index of a leaf with the highest score in the subtree that has not
  been recorded above this subtree
  """
  active_count: int  # or: activated
  """ Number of active points in the tree """

  tree_i: int

  def __init__(self, anchors: List[T], init: T):
    """
    Take a list of points and construct a PST from them. Complexity: O(n log n).
    """

    size = len(anchors) - 1
    for i in range(5):
      size = size | (size >> (2 ** i))
    size = (size + 1) * 2

    self.p = [-1] * size
    self.a = [-1] * size
    self.h = [init] * size
    self.active_count = 0
    self.anchors = anchors
    self.anchors.sort()
    self.score = [MIN_SCORE] * size

    self.tree_i = 0
    self._build(hi=len(self.anchors))

  def _build(self, i = 0, lo = 0, hi = -1):
    """ Recursively initialize the tree rooted at node {i}. """
    if i >= len(self.h):
      return -1
    elif lo + 1 == hi:  # leaf
      self.a[i] = self.tree_i
      self.h[i] = self.anchors[self.tree_i]
      self.tree_i += 1
      return i
    else:
      bound = (lo + hi + 1) // 2
      l, r = self._next(i)
      li = self._build(l, lo, bound)
      ri = self._build(r, bound, hi)
      self.h[i] = self.h[r if r < len(self.h) else l]
      return max(li, ri, i)

  def rmq(self, lo, hi):
    """
    Find a point with the highest score whose coordinate is between lo and hi (inclusive).
    Returns a leaf index within the tree.
    Complexity: O(log n).
    """
    i = self._rmq(lo, hi, 0)
    return -1 if i == -1 else self.a[i]

  def _rmq(self, lo, hi, i):
    if i >= len(self.h):
      return -1
    elif self.a[i] != -1:  # leaf
      return i if lo <= self.anchors[self.a[i]] <= hi else -1
    else:
      if self.p[i] == -1:
        return -1
      elif lo <= self.anchors[self.a[self.p[i]]] <= hi:
        return self.p[i]
      else:
        l, r = self._next(i)
        if hi <= self.h[l]:  # h is inclusive
          return self._rmq(lo, hi, l)
        elif lo > self.h[l]:
          return self._rmq(lo, hi, r)
        else:
          lm, rm = self._rmq(lo, hi, l), self._rmq(lo, hi, r)
          if lm == -1 or rm == -1:
            return max(lm, rm)  # any non-negative or -1
          return lm if self.score[self.a[lm]] >= self.score[self.a[rm]] else rm

  def activate(self, x, score):
    """
    Activate a point with coordinate {x} and set its score to {score}.
    Complexity: O(log n).
    """
    leaf = self._get(x)
    assert leaf != -1
    self.score[self.a[leaf]] = score

    i = 0
    while i < len(self.h):
      if self.p[i] == -1 or self.score[self.a[leaf]] >= self.score[self.a[self.p[i]]]:
        leaf, self.p[i] = self.p[i], leaf
      if leaf == -1:
        break
      l, r = self._next(i)
      i = r if self.anchors[self.a[leaf]] > self.h[l] else l
    self.active_count += 1
    assert self.active_count <= len(self.anchors)

  def deactivate(self, x):
    """
    Deactivate a point with coordinate {x} and set its score to -INF.
    Complexity: O(log n).
    """
    leaf = self._get(x)
    assert leaf != -1
    self.score[self.a[leaf]] = MIN_SCORE

    i = 0
    while i < len(self.h):
      if self.p[i] == -1:
        break
      elif self.p[i] == leaf and self.a[i] != -1:
        self.p[i] = -1
      elif self.p[i] == leaf:
        l, r = self._next(i)
        if (r < len(self.h) and self.p[r] != -1 and
            (self.p[l] == -1 or self.score[self.a[self.p[r]]] > self.score[self.a[self.p[l]]])):
          self.p[i] = leaf = self.p[r]
          i = r
        else:
          self.p[i] = leaf = self.p[l]
          i = l
      else:
        l, r = self._next(i)
        i = r if x > self.h[l] else l
    self.active_count -= 1

  def _next(self, i):
    return 2 * i + 1, 2 * i + 2

  def _get(self, x):
    """
    Find a leaf node with coordinate {x}.
    Complexity: O(log n).
    """
    i = 0
    while i < len(self.h):
      if self.a[i] != -1 and x == self.anchors[self.a[i]]:
        break
      l, r = self._next(i)
      i = r if x > self.h[l] else l
    return i if i < len(self.h) and x == self.h[i] else -1


def chain(
  anchors,
  MATCH_SCORE = 4,
  MAX_CHAIN_GAP = 210,
  MIN_UPPERCASE_MATCH = 90,
  MIN_READ_SIZE = 700,
  MAX_ERROR = 0.3
):
  """
  Finds all local chains with from the list of anchors.
  Each anchor is a tuple of {(start_reference, start_query, anchor_len)}.
  Returns a list of chains where each chain is a list of indices from the {anchors} list.
  Complexity: O(n log n) where {n = len(anchors)}.
  """

  if not anchors:
    return
  # Construct a tree from y-points (query)
  xs = [(x, i) for i, (x, _, _) in enumerate(anchors)]
  xs += [(x + l, i) for i, (x, _, l) in enumerate(anchors)]
  ys = [(y + l - 1, i) for i, (_, y, l) in enumerate(anchors)] # inclusive bound
  max_x, max_y = max(xs)[0], max(ys)[0] + 1
  tree = PrioritySearchTree(ys, (0, 0))

  # Iterate through the sorted x-points (reference)
  dp = [(0, i) for i in range(len(anchors))]  # DP table
  prev = [-1] * len(anchors)  # pointer to the previous element in chain
  deactivate_bound = 0
  xs.sort()
  for xi, (x, ai) in enumerate(xs):  # (x.x.first, i)
    ax, ay, al = anchors[ai]
    if x == ax:  # left interval point
      while deactivate_bound < xi:
        d = xs[deactivate_bound][1]
        if xs[deactivate_bound][0] == anchors[d][0] + anchors[d][2]:
          if ax - (anchors[d][0] + anchors[d][2]) <= MAX_CHAIN_GAP:
            break
          tree.deactivate((anchors[d][1] + anchors[d][2] - 1, d))
        deactivate_bound += 1

      w = MATCH_SCORE + (MATCH_SCORE // 2) * (al - 1)
      # Find the highest scoring segment that precedes the current one
      j = tree.rmq((ay - MAX_CHAIN_GAP, 0), (ay - 1, len(anchors)))
      if j != -1 and tree.score[j] != MIN_SCORE:
        j = ys[j][1]
        gap = ax - (anchors[j][0] + anchors[j][2]) + ay - (anchors[j][1] + anchors[j][2])
        if w + dp[j][0] - gap > 0:
          dp[ai] = (w + dp[j][0] - gap, dp[ai][1])
          prev[ai] = j
        else:
          dp[ai] = (w, dp[ai][1])
      else:
        dp[ai] = (w, dp[ai][1])
    else:
      gap = max_x + 1 - (ax + al) + max_y + 1 - (ay + al)
      tree.activate((ay + al - 1, ai), dp[ai][0] - gap)
  dp.sort(reverse=True)
  
  # Reconstruct the chains
  used = [False] * len(dp)
  for _, i in dp:
    if not used[i]:
      path = []
      while i != -1 and not used[i]:
        path.append(i)
        used[i] = True
        i = prev[i]
      path = path[::-1]

      xlo, xhi = anchors[path[0]][0], anchors[path[-1]][0] + anchors[path[-1]][2]
      ylo, yhi = anchors[path[0]][1], anchors[path[-1]][1] + anchors[path[-1]][2]
      span = max(yhi - ylo, xhi - xlo)
      if span >= MIN_UPPERCASE_MATCH or span >= int(MIN_READ_SIZE * (1 - MAX_ERROR)):
        yield path
