import getopt 
import bio
import time
import sys

import align
import hit
import chain
import search
import cluster
import decompose
import mask


def help():
  print('BISER v1.0')
  print('Usage: biser [search|align|extract|cluster|decompose] -o [output]')
  sys.exit(0)


if __name__ == "__main__":
  if len(sys.argv) < 3:
    help()
  
  mode = sys.argv[1]
  opts, args = getopt.getopt(sys.argv[2:], "t:o:c:")
  chr, out, threads = '', '', 1
  for o, a in opts:
    if o in ("-o", "--output"):
      out = a
    elif o in ("-t", "--threads"):
      threads = int(a)
    elif o in ("-c", "--chr"):
      chr = a
  if out == '':
    help()

  match mode:
    case 'search':
      if not args or len(args) not in [1, 4]:
        raise ValueError("Invalid arguments")
      result: Dict[Tuple[str, str, str, str, bool], List[hit.Hit]] = {}
      with time.timing("Search"):  
        if len(args) == 1:
          search.search(args[0], chr, result)
        else:
          genome, ch, ygenome, yints = args
          search.cross_search(genome, ch, ygenome, yints, result)
      with open(out, "w") as f:
        for r in result.values():
          for h in hit.Hit.merge(r, search.MERGE_DIST):
            print(h, file=f)
    case 'align':
      if len(args) < 2:
        raise ValueError("Invalid arguments")
      chromosomes = {}
      for genome in args[:-1]:
        with bio.FASTA(genome) as fa:
          sp = search.get_species_name(genome)
          for r in fa:
            chromosomes[sp, r.name, False] = hit.Chromosome(
              len(chromosomes), sp, r.name, False, len(r.seq), r.seq
            )
            chromosomes[sp, r.name, True] = hit.Chromosome(
              len(chromosomes), sp, r.name, True, len(r.seq), ~r.seq
            )
      with time.timing("Alignment"), open(args[-1]) as f, open(out, 'w') as fo:
        for lp in f:
          h = hit.Hit(lp, chromosomes)
          anchors = list(align.generate_anchors(h))
          new_hits = []
          for ch in chain.chain(anchors):
            nh = hit.Hit(h, [hit.Hit(h, anchors[i]) for i in ch])
            new_hits.append(nh)
          for nh in align.refine(h, new_hits):
            print(nh.__str__(True), file=fo)
    case 'extract':
      if len(args) != 1:
        raise ValueError("Invalid arguments")
      with time.timing("Extraction"):
        cluster.extract(args[0], out)
    case 'cluster':
      if len(args) < 2:
        raise ValueError("Invalid arguments")
      with time.timing("Clustering"):
        cluster.cluster(args[1:], args[0], out)
    case 'decompose':
      if len(args) != 1:
        raise ValueError("Invalid arguments")
      with time.timing("Decomposition"):
        decompose.decompose(args[0], args[0].split('/')[-1].split('.')[0], out)
    case 'mask':
      if len(args) != 1:
        raise ValueError("Invalid arguments")
      with time.timing("Masking"):
        mask.mask(args[0], out)
    case 'translate':
      if len(args) < 2:
        raise ValueError("Invalid arguments")
      with time.timing("Translate"):
        mask.translate(args[1:], args[0], out)
    case _:
      help()
