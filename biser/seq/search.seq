import sys
import math
import getopt
import collections
import bio
import os
import bisect
import time
import align
import chain
import hit
from hit import Hit, Chromosome, Locus


KMER_SIZE = 14
WINNOW_SIZE = 16
QUERY_THRESHOLD = 100
REF_THRESHOLD = 500
MAX_EXTEND = 5_000
MAX_DISTANCE = 250
INDEX_CUTOFF = 0.001
MAX_SD_LEN = 2_000_000_000
MAX_ERROR = 0.3
MAX_EDIT_ERROR = 0.15
MERGE_DIST = 500


class ListNode:
  first: int
  last: int
  ref: int
  ref_last: int
  chr: int
  age: int = 0
  count: int = 0
  next: Optional[ListNode] = None
  potentional: bool = False

  def insert_after(self, first, ref, chr, age = 1, count = 1):
    self.next = ListNode(first, first, ref, ref, chr, age, count, self.next)

  def __iter__(self):
    walker: Optional[ListNode] = self
    while walker:
      yield walker
      walker = walker.next

  def __str__(self):
    return ''.join(
      f"({i.first}:{i.last}; ref: {i.ref}, {i.chr}; {i.age}/{i.count}; "
      f"{i.potentional})->"
      for i in self
    )

  def __len__(self):
    return sum(1 for _ in self)


def tau():
  ratio = (MAX_ERROR - MAX_EDIT_ERROR) / MAX_EDIT_ERROR
  gap_error = min(1.0, ratio * MAX_EDIT_ERROR)
  a = (1 - gap_error) / (1 + gap_error)
  b = 1 / (2 * math.exp(KMER_SIZE * MAX_EDIT_ERROR) - 1)
  return a * b


def save_sd(L, cur, chrs, result):
  def pad_sd(chrs, c1, b1, e1, c2, b2, e2):
    b1 = max(0, b1 - MAX_EXTEND)
    e1 = min(chrs[c1].len - 1, e1 + MAX_EXTEND)
    if c1 == c2: e1 = min(e1, b2)
    b2 = max(0, b2 - MAX_EXTEND)
    if c1 == c2: b2 = max(b2, e1)
    e2 = min(chrs[c2].len - 1, e2 + MAX_EXTEND)
    return (b1, e1, b2, e2)

  if L.chr < len(chrs) and cur.chr < len(chrs):
    chr1, chr2 = chrs[L.chr], chrs[cur.chr]
    complement = chr1.rc or chr2.rc
    coord = pad_sd(chrs, L.chr, L.first, L.last, cur.chr, L.ref, cur.loc)
    result.setdefault(
      (chr1.species, chr1.name, chr2.species, chr2.name, complement), []
    ).append(
      Hit(chr1, coord[0], coord[1], chr2, coord[2], coord[3], True)
    )
  else:
    raise ValueError("reverse complemented intervals should not be here")


def update_list(L: Optional[ListNode], loci, current, chrs, result, tau):
  lidx = 0

  # if certain values in the beginning of the loci are lower that first node,
  # add them all beforehand
  walker, previous, holder = L, L, L
  while L and lidx < len(loci) and (loci[lidx].chr, loci[lidx].loc) < (L.chr, L.first):
    if not (
      lidx < len(loci)
      and chrs[current.chr].rc
      and loci[lidx].chr != current.chr - 1
    ):
      walker = ListNode(
        loci[lidx].loc, loci[lidx].loc,
        current.loc, current.loc,
        loci[lidx].chr, 1, 1, L
      )
      if previous is not L:
        previous.next = walker
      if lidx == 0:
        holder = walker
      previous = walker
    lidx += 1

  walker, previous, L = L, L, holder
  while walker:
    if (
      lidx < len(loci)
      and chrs[current.chr].rc
      and loci[lidx].chr != current.chr - 1
    ):
      lidx += 1
      continue

    if (
      lidx < len(loci)
      and walker.ref != current.loc
      and walker.chr == loci[lidx].chr
      and loci[lidx][1] - MAX_DISTANCE <= walker.last < loci[lidx].loc
    ):
      walker.last = loci[lidx].loc
      walker.ref_last = current.loc
      walker.count += 1
      lidx += 1
    elif lidx < len(loci) and (
      not walker.next
      or (
        loci[lidx][0] < walker.next.chr
        or (walker.next.chr == loci[lidx].chr and walker.next.first >= loci[lidx].loc)
      )
    ):
      # We set age to 0, we will increase it to one when we are on this node
      walker.insert_after(loci[lidx].loc, current.loc, loci[lidx].chr, 0, 1)
      if loci[lidx].chr == walker.chr and walker.first < loci[lidx].loc < walker.last:
        walker.age += 1
      lidx += 1
      continue

    walker.age += 1
    condition = walker.count >= math.ceil(walker.age * tau)
    delete = False
    if condition and (walker.last - walker.first) < MAX_SD_LEN:
      walker.potentional = True
    elif (not condition) or walker.last - walker.first >= MAX_SD_LEN:
      if walker.potentional:
        # for last was previously used walker.first + current - walker.ref
        # (< walker.ref -> for checking how close they are?)
        if (
          current.loc - walker.ref >= REF_THRESHOLD and
          walker.last - walker.first > QUERY_THRESHOLD
        ):
          save_sd(walker, Locus(current.chr, walker.ref_last), chrs, result)
      if walker is L:
        L = L.next
      elif walker.next is None:
        previous.next = None
      else:
          delete = True
          previous.next = walker.next
    if not delete:
      previous = walker
    walker = walker.next

  while lidx < len(loci):
    if not (
      lidx < len(loci)
      and chrs[current.chr].rc
      and loci[lidx].chr != current.chr - 1
    ):
      if not L:
        previous = L = ListNode(
          loci[0].loc, loci[0].loc, current.loc, current.loc, loci[0].chr, 1, 1
        )
      else:
        previous.insert_after(loci[lidx].loc, current.loc, loci[lidx].chr)
        previous = previous.next
    lidx += 1
  return L


def build_index(
  s: bio.seq,
  chr: int,
  index: Dict[int, List[Locus]], # kmer -> [(chr, loc)]
  chromosomes,
  result,
  tau,
  find_sds = False,
  build_index = False,
  max_frequency = (1 << 32) - 1,
  st = 0
):
  MASK = (1 << (2 * KMER_SIZE)) - 1

  L = None
  processed_kmer_count = 0

  winnow = []
  h, last_hash = 0, -1
  for i, si in enumerate(s): # TODO: use seq k-mers
    h = ((h << 2) | (int(si) & 3)) & MASK
    if i < KMER_SIZE - 1:
      continue
    while winnow and not (winnow[-1][0] < h):
      winnow.pop()
    while winnow and winnow[-1][1] < (i - KMER_SIZE + 1) - WINNOW_SIZE:
      winnow.pop(0)
    winnow.append((h, i - KMER_SIZE + 1))
    if i - KMER_SIZE + 1 < WINNOW_SIZE:
      continue
    if len(index) == 0 or winnow[0][0] != last_hash:
      processed_kmer_count += 1
      hash = winnow[0][0]
      if hash in index:
        if find_sds:
          if len(index[hash]) >= max_frequency:
            continue
          L = update_list(
            L, index[hash], Locus(chr, st + winnow[0][1]), chromosomes, result, tau
          )
        if build_index:
          index[hash].append(Locus(chr, st + winnow[0][1]))
      elif build_index:
        index[hash] = [Locus(chr, st + winnow[0][1])]
      last_hash = hash

  if find_sds and L:
    for i in L:
      if i.potentional and (i.last - i.first > QUERY_THRESHOLD or i.count >= 4):
        save_sd(i, Locus(chr, i.ref_last), chromosomes, result)
  return processed_kmer_count


def get_species_name(path):
  p = path.split("/")[-1].split('.')
  return '.'.join(p[:-1]).replace('#', '')


def filter_index(index, frequency):
  threshold = 1 << 31
  hist, max_len = {}, 0
  for loci in index.values():
    hist[len(loci)] = hist.get(len(loci), 0) + 1
    max_len = max(max_len, len(loci))
  sum, occurrence = 0, 0
  for i in sorted(hist.keys(), reverse=True):
    sum += hist[i]
    if sum <= int(frequency * INDEX_CUTOFF):
      threshold = i
      occurrence += hist[i]
    else:
      break
  print(f"filtered {occurrence} k-mers")
  return threshold


def search(genome, ch, result):
  tau = tau()

  chrs = []
  species = get_species_name(genome)
  with bio.FASTA(genome) as fr:
    for st in [False, True]:
      chrs.append(Chromosome(len(chrs), species, ch, st, len(fr[ch])))

  index = {}
  frequency = 0
  with bio.FASTA(genome) as fr:
    for chr_index, chr in enumerate(chrs):
      frequency = build_index(
        ~fr[chr.name] if chr.rc else fr[chr.name],
        chr_index, index, chrs, result, tau,
        build_index=True, find_sds=True,
      )

  threshold = filter_index(index, frequency)
  with bio.FASTA(genome) as fr:
    for i in fr:
      if i.name > ch:
        chrs.append(Chromosome(len(chrs), species, i.name, False, len(i.seq)))
        build_index(
          i.seq, len(chrs) - 1, index, chrs, result, tau,
          build_index=False, find_sds=True, max_frequency=threshold,
        )


def cross_search(genome, ch, ygenome, yints, result):
  tau = tau()

  chrs = []
  with bio.FASTA(genome) as fr:
    species = get_species_name(genome)
    for st in [False, True]:
      chrs.append(Chromosome(len(chrs), species, ch, st, len(fr[ch])))

  index = {}
  frequency = 0
  with time.timing('Build index'), bio.FASTA(genome) as fr:
    for chr_index, chr in enumerate(chrs):
      frequency = build_index(
        ~fr[chr.name] if chr.rc else fr[chr.name],
        chr_index, index, chrs, result, tau,
        build_index=True, find_sds=False,
      )

  threshold = filter_index(index, frequency)
  with time.timing('Search index'), bio.FASTA(ygenome) as fr, open(yints) as fi:
    ints = {}
    for lp in fi:
      l = lp.strip().split('\t')
      ints.setdefault(l[0], []).append((int(l[1]), int(l[2])))

    species = get_species_name(ygenome)
    for i in fr:
      chrs.append(Chromosome(len(chrs), species, i.name, False, len(i.seq)))
      for st, ed in ints.get(i.name, []):
        frequency = build_index(
          i.seq[st:ed], len(chrs) - 1, index, chrs, result, tau,
          build_index=False, find_sds=True, max_frequency=threshold, st=st
        )
