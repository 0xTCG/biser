from bio import CIGAR
import sys
from time import timing
from IntervalTree.intervaltree import *


chrsIds = dict[int, str]()
def merge_overlaps_1(l1: list[Interval[bool]]):

    l1.sort()

    skip_these = set[int]()
    delete_these = set[int]()
    final_sds = list[Interval[bool]]()


    i = 0
    while i < len(l1):
        if i in skip_these:
            i+= 1
            continue
        
        j = i+1
        while j < len(l1) and l1[i].end >= l1[j].begin:
            if not j in skip_these:
                
                if l1[i].overlaps(l1[j]):
                    merged = Interval[bool](min(l1[i].begin, l1[j].begin), max(l1[i].end, l1[j].end), True)
                    skip_these.add(j)
                    l1[i] = merged


            j+=1
        final_sds.append(l1[i])
        i += 1
    
    return final_sds
    
class Dot:
    chr: int
    pos: int
    def __init__(self, chr:str, pos:int):
        self.chr = chr
        self.pos = pos
    # , sd_id : int
    def __hash__(self):
        return tuple[int,int](self.chr, self.pos).__hash__()
    def __eq__(self, other):
        return self.chr == other.chr and self.pos == other.pos
    def __ne__(self, other):
        return self.chr != other.chr or self.pos != other.pos
    def __str__(self, ):
        return f'{self.chr}, {self.pos}'
class Pos:
    chr: int
    start: int
    end: int
    def __init__(self, chr, start, end):
        self.chr = chr
        self.start = start
        self.end = end



class SD:
    id: int
    mate1: Pos
    mate2: Pos
    reversed: bool
    cigar: CIGAR
    inv_d_i: bool

    def __init__(self: SD, p1: Pos, p2: Pos, reversed: bool, cigar: CIGAR):
        self.mate1 = p1
        self.mate2 = p2
        self.reversed = reversed
        self.cigar = cigar
        self.inv_d_i = True
    def __init__(self: SD, p1: Pos, p2: Pos, reversed: bool, cigar: CIGAR, inv_d_i: bool):
        self.mate1 = p1
        self.mate2 = p2
        self.reversed = reversed
        self.cigar = cigar
        self.inv_d_i = inv_d_i
    
    def get_first(self:SD, possible_extension = 0):
        c1, s1, e1 = self.mate1.chr, self.mate1.start, self.mate1.end
        c2, s2, e2 = self.mate2.chr, self.mate2.start, self.mate2.end
        return (Dot(c1, s1 - possible_extension), Dot(c2,s2 - possible_extension))
    def get_last(self: SD, possible_extension = 0):
        c1, s1, e1 = self.mate1.chr, self.mate1.start, self.mate1.end
        c2, s2, e2 = self.mate2.chr, self.mate2.start, self.mate2.end
        
        e1 -= 1
        e2 -= 1
        return (Dot(c1, e1 + possible_extension), Dot(c2,e2 + possible_extension ))

    def get_all_dots(self: SD, possible_extension = 0) -> tuple[list[Dot], list[Dot]]:
        c1, s1, e1 = self.mate1.chr, self.mate1.start, self.mate1.end
        c2, s2, e2 = self.mate2.chr, self.mate2.start, self.mate2.end
        # print s1, e1, s2,e2
        assert s1 < e1
        assert s2 < e2

        l1 = list[Dot]()
        for i in range(s1 - possible_extension,e1 + possible_extension):
            l1.append(Dot(c1, i))

        l2 = list[Dot]()
        for i in range(s2 - possible_extension,e2 + possible_extension):
            l2.append(Dot(c2, i))
        return (l1,l2)
    def get_pairs(self: SD) -> tuple[Dot, Dot]:
        c1, s1, e1 = self.mate1.chr, self.mate1.start, self.mate1.end
        c2, s2, e2 = self.mate2.chr, self.mate2.start, self.mate2.end
        dir = 1
        if self.reversed:
            s2 = e2 - 1
            dir = -1
        for sz, op in self.cigar:
            # print sz, op
            if op == 'M':
                for i in range(sz):
                    yield Dot(c1, s1), Dot(c2, s2)
                    s1 += 1
                    s2 += dir
            elif op == 'D': #D I
                # yield Dot(c1, s1), Dot(c2, s2)
                s1 += sz
            elif op == 'I': #I D
                # yield Dot(c1, s1), Dot(c2, s2)
                s2 += dir * sz
        # print s1, s2, e1, e2
        assert s1 == e1 
    def get_pairs_3(self: SD) -> tuple[list[Dot], list[Dot]]:
        c1, s1, e1 = self.mate1.chr, self.mate1.start, self.mate1.end
        c2, s2, e2 = self.mate2.chr, self.mate2.start, self.mate2.end
        l1 = list[Dot]()
        l2 = list[Dot]()
        threshold = 0

        d__ = 'D' if self.inv_d_i else 'I'
        i__ = 'I' if self.inv_d_i else 'D'

        dir = 1
        if self.reversed:
            s2 = e2 - 1
            dir = -1
        for sz, op in self.cigar:
            # print sz, op
            if op == 'M':
                for i in range(sz):
                    l1.append(Dot(c1, s1))
                    l2.append(Dot(c2, s2))
                    s1 += 1
                    s2 += dir
            elif op == i__: #D I
                if sz < threshold:
                    for i in range(sz):
                        l1.append(Dot(c1, s1))
                        l2.append(Dot(c2, s2))
                        s1 += 1
                else:
                    s1 += sz
            elif op == d__: #I D
                if sz < threshold:
                    for i in range(sz):
                        l1.append(Dot(c1, s1))
                        l2.append(Dot(c2, s2))
                        s2 += dir
                else:
                    s2 += dir * sz
        # print s1, s2, e1, e2
        assert s1 == e1 
        return (l1, l2)
    def get_pairs_2(self: SD) -> tuple[Dot, Dot]:
        c1, s1, e1 = self.mate1.chr, self.mate1.start, self.mate1.end
        c2, s2, e2 = self.mate2.chr, self.mate2.start, self.mate2.end
        dir = 1
        if self.reversed:
            s2 = e2 - 1
            dir = -1
        for sz, op in self.cigar:
            # print sz, op
            if op == 'M':
                for i in range(sz):
                    yield Dot(c1, s1), Dot(c2, s2)
                    s1 += 1
                    s2 += dir
            elif op == 'I': #D
                for i in range(sz):
                    yield Dot(c1, s1), Dot(c2, s2)
                    s1 += 1
            elif op == 'D': #I
                for i in range(sz):
                    yield Dot(c1, s1), Dot(c2, s2)
                    s2 += dir
        # print s1, s2, e1, e2
        assert s1 == e1 
    def __str__(self: SD):
        return f'{self.mate1}\t{self.mate2}\t{self.reversed}'

# class Set:
#     id: int 
#     parent: int
#     rank: int
#     dot: Dot

# class UnionFind:
#     elements: list[Set]
#     def __init__(self: UnionFind, dots: dict[Dot, int]):
#         self.elements = list[Set](len(dots))
#         for i in range(len(dots)):
#             self.elements.append(Set(i, i, 1, Dot(0, 0)))
#         for d, i in dots.items():
#             self.elements[i].dot = d
#     def find(self: UnionFind, s: int) -> int:
#         el = self.elements[s]
#         if el.id != el.parent:
#             # if el.dot.chr != self.elements[el.parent].dot.chr or abs(el.dot.pos - self.elements[el.parent].dot.pos) > 70:
#             el.parent = self.find(el.parent)
#         return el.parent
#         # else:
#         # 	return el.id
#     def union(self: UnionFind, x: int, y: int):
#         p1, p2 = self.elements[self.find(x)], self.elements[self.find(y)]
#         # print p1.dot, p2.dot, p1.parent, p2.parent, p1.rank, p2.rank
#         if p1.parent == p2.parent: 
#             return
#         if p1.rank > p2.rank: 
#             p1, p2 = p2, p1
#         # if p1.dot.chr != p2.dot.chr or abs(p1.parent - p2.parent) > 70:
#         p1.parent = p2.parent
#         if p1.rank == p2.rank:
#             p2.rank = p1.rank + 1
#         # print p1.dot, p2.dot, p1.parent, p2.parent, p1.rank, p2.rank
    
        
#     def __str__(self: UnionFind):
#         final_s = ''
#         for i in self.elements:
#             final_s += f'{i.dot}\t'
#         return final_s



# class DotSet:
#     dots: list[int]
#     uf: UnionFind
#     belongings: dict[int,set[int]]
#     visited: bool
    
#     def __init__(self: DotSet, uf: UnionFind, belongings: dict[int,set[int]]):
#         self.dots = list[int]()
#         self.uf = uf
#         self.belongings = belongings
#         self.visited = False
#     def __init__(self: DotSet, dots_: list[int], uf: UnionFind, belongings: dict[int,set[int]]):
#         self.dots = dots_
#         self.uf = uf
#         self.belongings = belongings
#         self.visited = False
#     def __init__(self: DotSet, other: DotSet):
#         self.dots = list[int](other.dots)
#         self.visited = other.visited
#         self.uf = other.uf
#         self.belongings = other.belongings

#     def __eq__(self: DotSet, o: DotSet):
#         assert (len(self.dots) > 0 and len(o.dots) > 0 )

#         return self.uf.elements[self.dots[0]].dot == self.uf.elements[o.dots[0]].dot
#     def __ne__(self: DotSet, o: DotSet):
#         assert (len(self.dots) > 0 and len(o.dots) > 0 )

#         return self.uf.elements[self.dots[0]].dot != self.uf.elements[o.dots[0]].dot
#     def __lt__(self: DotSet, o: DotSet):
#         assert (len(self.dots) > 0 and len(o.dots) > 0 )

#         return not self > o and not self == o
#     def __le__(self: DotSet, o: DotSet):
#         return (not self > o) or self == o
#     def __ge__(self: DotSet, o: DotSet):
#         return self > o or self == o
#     def __gt__(self: DotSet, o: DotSet):
#         assert (len(self.dots) > 0 and len(o.dots) > 0 )
#         return self.uf.elements[self.dots[0]].dot > self.uf.elements[o.dots[0]].dot

#         c1 = 0
#         c2 = 0
#         while c1 < len(self.dots) and c2 < len(o.dots):
#             # print uf.elements[self.dots[c1]].dot.pos, uf.elements[o.dots[c2]].dot.pos

#             if len( self.belongings[self.dots[c1]].intersection(self.belongings[o.dots[c2]]) ) > 0 and self.uf.elements[self.dots[c1]].dot > self.uf.elements[o.dots[c2]].dot:
#                 # c1 += 1
#                 # c2 += 1
#                 # print uf.elements[self.dots[c1]].dot.pos, uf.elements[o.dots[c2]].dot.pos
#                 return True
#             elif len( self.belongings[self.dots[c1]].intersection(self.belongings[o.dots[c2]]) ) > 0:
#                 # print uf.elements[self.dots[c1 ]].dot.pos, uf.elements[o.dots[c2]].dot.pos

#                 return False
#             # else:
#             if len(self.dots) > len(o.dots):
#                 c1+=1
#             else:
#                 c2+=1
#                 # break
        
#         return self.uf.elements[self.dots[0]].dot > self.uf.elements[o.dots[0]].dot
        
#     def __str__(self: DotSet):
#         s = "DotSet:\t"
#         for i in self.dots:
#             s += f'(chr: {chrsIds[self.uf.elements[i].dot.chr]}, pos: {self.uf.elements[i].dot.pos})\t'
#         return s

#     # def __hash__(self:DotSet):
#     #     return self.uf.elements[0].dot.chr * self.uf.elements[0].dot.pos

#     def nextTo(self: DotSet, prev: DotSet, approximate_len: int):
#         # if len(self.dots) > len(prev.dots):

#         if len(self.dots) != len(prev.dots):
#             return False

        
#         diff = 0
#         for i in range(len(self.dots)):
#             ds = self.uf.elements[self.dots[i]].dot
#             dp = self.uf.elements[prev.dots[i]].dot
#             # if ds.chr != dp.chr:
#             # 	return False
#             # if ds.pos != dp.pos + 1:
#             # this variable for max_gap_len can affect coverage
#             if ds.chr != dp.chr or abs( ds.pos - dp.pos ) > 70: # or ds.pos < dp.pos:
#                 return False
#         return True


# def color_dots(color, belongs, set2):
#     for i in set2:
#         belongs[i] = color

# def binary_search(all_dots:list[Dot], arr, low, high, x): 
    
#     if high >= low: 
  
#         mid = (high + low) // 2

#         if all_dots[arr[mid]].chr == all_dots[x].chr and abs(all_dots[mid].pos - all_dots[x].pos) < 70: 
#             return True 

#         elif all_dots[arr[mid]] > all_dots[x]: 
#             return binary_search(all_dots, arr, low, mid - 1, x) 
#         else: 
#             return binary_search(all_dots, arr, mid + 1, high, x) 

#     else: 
#         return False

# def merge_lists(all_dots, set1, set2):
#     i = 0
#     j = 0
#     return_set = list[int]()
#     while i < len(set1) and j < len(set2):
#         if all_dots[set1[i]] < all_dots[set2[j]]:
#             return_set.append(set1[i])
#             i+= 1
#         else:
#             return_set.append(set2[j])
#             j+=1

#     while i < len(set1):
#         return_set.append(set1[i])
#         i+= 1

#     while j < len(set2):
#         return_set.append(set2[j])
#         j += 1

#     return return_set



# def union2(all_dots:list[Dot],belongs: dict[int, int], sets: dict[int, list[int]], x: int, y: int):
#     # print x,y
#     set_id1 =  belongs[x]
#     set_id2 = belongs[y]
    
#     if set_id1 == set_id2:
#         return -1

#     set1 = sets[ set_id1 ]
#     set2 = sets[ set_id2 ]

#     if binary_search(all_dots, set1, 0, len(set1) - 1, y):
#         return 0
#     if binary_search(all_dots, set2, 0, len(set2) - 1, x):
#         return 0
        
#     # sets[set_id1].ext(set2)
#     sets[set_id1] = merge_lists(all_dots, set1, set2)
#     # sets[set_id2] = [y]
#     # belongs[y] = set_id1

#     color_dots(set_id1, belongs, set2)

    
#     del sets[set_id2]
#     # if len(sets[set_id1]) > 10000:
#     #     for i in sets[set_id1]:
#     #         print all_dots[i]
#     #     sys.exit(1)
#     return len(sets[set_id1])

#     # else:
#     #     belongs[x] = set_id2
#     #     color_dots(set_id2, belongs, set1)
#     #     sets[set_id2].ext(set1)

#         # del sets[belongs[x]]




