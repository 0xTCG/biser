import sys
from hash import *


class AVLNode[K,V]:
    key: K
    value: V
    parent: AVLNode[K,V]
    left: AVLNode[K,V]
    right: AVLNode[K,V]
    height: int

    
    def __init__(self: AVLNode[K,V], parent: AVLNode[K,V], k: K, v: V):
        self.key = k
        self.value = v
        self.parent = parent
        self.left = None
        self.right = None
        self.height = -1
        #None, Hash(), 0
    def __init__(self: AVLNode[K,V]):
        self.key = K()
        self.value = V()
        self.parent = None
        self.left = None
        self.right = None
        self.height = -1
    def __eq__(first: AVLNode[K,V], second: AVLNode[K,V]):
        if not first or not second:
            return False
        return first.key == second.key and first.value ==second.value
    def __ne__(first: AVLNode[K,V], second: AVLNode[K,V]):
        return not first == second

    def find(self, k: K) -> AVLNode[K,V]:
        if not self:
            return None
        if k == self.key:
            return self
        elif k < self.key:
            if self.left is None:
                return None
            else:
                return self.left.find(k)
        else:
            if self.right is None:
                return None
            else:
                return self.right.find(k)

    def find_min(self):
        current = self
        
        # while current and current.parent:
        #     current = current.parent
        while current.left: #is not None
            current = current.left
        return current
    def find_max(self):
        current = self
        # while current and current.parent:
        #     current = current.parent
        while current.right is not None:
            current = current.right
        return current
    
    def next_larger(self)  -> AVLNode[K,V]:
        if not self:
            return None
        if self.right is not None:
            return self.right.find_min()
        current = self
        while current.parent and current is current.parent.right: #is not None
            current = current.parent
        if current and current.parent and current.parent.key > current.key:
            return current.parent
        return None
    def next_smaller(self) -> AVLNode[K,V]:
        # print( self)
        if not self:
            return None
        if self.left is not None:
            
            return self.left.find_max()
        current = self
        while current and current.parent is not None and current is current.parent.left:
            current = current.parent
        if current and current.parent and current.parent.key < current.key:
            return current.parent

        return None

    def insert(self, node):
        if node is None or self is None:
            return
        if node.key < self.key:
            if self.left is None:
                node.parent = self
                self.left = node
            else:
                self.left.insert(node)
        else:
            if self.right is None:
                node.parent = self
                self.right = node
            else:
                self.right.insert(node)

    def delete(self):
        if self.left is None or self.right is None:
            if self is self.parent.left:
                self.parent.left = self.left if self.left else self.right
                if self.parent.left is not None:
                    self.parent.left.parent = self.parent
            else:
                self.parent.right = self.left if self.left else self.right
                if self.parent.right is not None:
                    self.parent.right.parent = self.parent
            return self
        else:
            s = self.next_larger()
            self.key, s.key = s.key, self.key
            self.value, s.value = s.value, self.value
            return s.delete()

    def __iter__(self: AVLNode[K,V]) -> AVLNode[K,V]:
        if self.left:
            for i in self.left:
                yield i
        yield self
        if self.right:
            for i in self.right:
                yield i
    def __str__(self: AVLNode[K,V]):
        if self:
            return f'{str(self.key)}, {str(self.value)}'
        else:
            return ""

def height(node):
    if node is None:
        return -1
    else:
        return node.height

def lower_bound[K,V]( i: K, current: AVLNode[K,V], possible: AVLNode[K,V] ) -> AVLNode[K,V]:
    # first version

    while current:
        # print(f'C: {current}')
        if current.key == i:
            return current
        elif current.key < i:
            current = current.right
        elif current.key > i:
            possible = current
            current = current.left
    return possible
    
    
    
    # new_node = current.find(i)
    # # assert(new_node)
    # if not new_node:
    #     poc = current.find_min()
    #     while poc and poc.key < i:
    #         poc = poc.next_larger()
    #     if poc and poc.key < i:
    #         new_node = poc
    # return new_node
    
    # second version:

    # if current and possible and current.key < possible.key and current.key>i:
    #     possible = current


    # if not current and possible:
    #     return possible
    # if current and current.key == i:
    #     return current
    

    
    # if current and current.key>i: #and current.left.key > i
    #     return lower_bound(i,current.left,possible)
    # if current and current.key<i:
    #     return lower_bound(i,current.right,possible)
    # if not current:
    #     return possible
    # return current

    #third version:
    # while current:
    #     if current and current.key > i:
    #         possible = current
    #         current = current.left
    #     if current and current.key < i:
    #         current = current.right
    #     if current and current.key == i:
    #         return current
    # return possible
    # return current


def update_height(node):
    node.height = max(height(node.left), height(node.right)) + 1

class AVL[K,V]:
    root: AVLNode[K,V]

    def __init__(self: AVL[K,V]):
        self.root = None

    def find(self, k: K) -> AVLNode[K,V]:
        if not self.root:
            return None
        return self.root.find(k)

    def find_min(self) -> AVLNode[K,V]:
        if not self.root:
            return None
        return self.root.find_min()
    def find_max(self) -> AVLNode[K,V]:
        if not self.root:
            return None
        return self.root.find_max()

    def lower_bound(self, i: K) -> AVLNode[K,V]:
        # if not self.root:
        #     return None
        # # forth version:
        # possible = self.root.find_max()
        # for elem in self:
        #     if elem.key >= i and elem.key < possible.key:
        #         possible = elem
        # return possible if possible.key >= i else None
        return lower_bound[K, V]( i, self.root, None )

    def next_larger(self, k):
        node = self.find(k)
        return node.next_larger() if node else None
    def next_smaller(self, k):
        node = self.find(k)
        return node.next_smaller() if node else None

    def left_rotate(self, x):
        y = x.right
        y.parent = x.parent
        if y.parent is None:
            self.root = y
        else:
            if y.parent.left is x:
                y.parent.left = y
            elif y.parent.right is x:
                y.parent.right = y
        x.right = y.left
        if x.right is not None:
            x.right.parent = x
        y.left = x
        x.parent = y
        update_height(x)
        update_height(y)

    def right_rotate(self, x):
        y = x.left
        y.parent = x.parent
        if y.parent is None:
            self.root = y
        else:
            if y.parent.left is x:
                y.parent.left = y
            elif y.parent.right is x:
                y.parent.right = y
        x.left = y.right
        if x.left is not None:
            x.left.parent = x
        y.right = x
        x.parent = y
        update_height(x)
        update_height(y)

    def rebalance(self, node):
        while node is not None:
            update_height(node)
            if height(node.left) >= 2 + height(node.right):
                if height(node.left.left) >= height(node.left.right):
                    self.right_rotate(node)
                else:
                    self.left_rotate(node.left)
                    self.right_rotate(node)
            elif height(node.right) >= 2 + height(node.left):
                if height(node.right.right) >= height(node.right.left):
                    self.left_rotate(node)
                else:
                    self.right_rotate(node.right)
                    self.left_rotate(node)
            node = node.parent

    def insert(self, k, v):
        node = AVLNode[K,V](None, k, v)
        if self.root is None:
            # The root's parent is None.
            self.root = node
        else:
            self.root.insert(node)

        self.rebalance(node)
        return node

    def delete(self, k) -> AVLNode[K,V]:
        node = self.find(k)
        if node is None:
            return None
        deleted = node  # make sure `deleted` has the right type
        deleted = None
        if node is self.root:
            pseudoroot = AVLNode[K,V]() # fixed this
            pseudoroot.left = self.root
            self.root.parent = pseudoroot
            deleted = self.root.delete()
            self.root = pseudoroot.left
            if self.root is not None:
                self.root.parent = None
        else:
            deleted = node.delete()
        self.rebalance(deleted.parent)

    def __setitem__(self: AVL[K,V], k: K, v: V):
        self.insert(k, v)

    def __getitem__(self: AVL[K,V], k: K):
        nd = self.find(k)
        if not nd:
            print 'whoops', k, 'not found'
            sys.exit(1)
        return nd.value

    def __delitem__(self: AVL[K,V], k: K):
        self.delete(k)

    def __contains__(self: AVL[K,V], k: K):
        return self.find(k) is not None

    def __iter__(self: AVL[K,V]):
        if self.root:
            for i in self.root:
                # yield i.key, i.value
                yield i
    def __str__(self: AVLNode[K,V]):
        s="["
        if self.root:
            for i in self.root:
                s+= f'{i},'
        s+='\n'
        return s

# d1 = AVL[int,int]()
# for a in range(5):
#     d1[a] = a*a

# p = d1.insert(6,36)
# print(p.key)
# print("ok")
# # EXPECT: 0
# # EXPECT: 1
# # EXPECT: 4
# # EXPECT: 9
# # EXPECT: 16

# for a in range(5):
#     print d1[a]
# a=d1.lower_bound(2)
# if a:
#     print(a.key)

# print 2 in d1  # EXPECT: True
# del d1[2]
# print 2 in d1  # EXPECT: False
# d1[2] = 44
# print 2 in d1  # EXPECT: True
# print d1[2]    # EXPECT: 44

# del d1[3]
# del d1[4]

# # EXPECT: 0 0
# # EXPECT: 1 1
# # EXPECT: 2 44
# for t in d1:
#     print t[0], t[1]

# fin = d1.next_larger(2)
# if fin:
#     print d1[fin.key]
# else:
#     print("nope")
