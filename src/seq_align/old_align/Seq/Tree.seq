class Interval:
	low: int
	high: int
	def __str__(self: Interval):
		return f'{self.low}\t{self.high}'

	def __eq__(i:Interval,j:Interval):
		if i.low == j.low and i.high == j.high:
			return True
		return False
	def __hash__(self:Interval):
		return self.low * self.low + self.high * self.high
	def __ne__(self:Interval,other:Interval):
		if self.low == other.low and self.high == other.high:
			return True
		return False



class ITNode:
	i: Interval
	max: int
	left: ITNode
	right: ITNode
	def __init__(self: ITNode,i:Interval, left: ITNode, right:ITNode):
		self.i =i
		self.max = i.high
		self.left = left
		self.right = right
		#optional[ITNode], optional[ITNode]
	def __init__(self: ITNode,i:Interval):
		self.i =i
		self.max = i.high
		self.left = None
		self.right = None
	# def __init__(self: ITNode):
	#     self.i = None
	#     self.max = -2
	#     self.left = None
	#     self.right = None
	def __str__(self: ITNode):
		return f'{self.i}'

	def __eq__(i:ITNode,j:ITNode):
		if i.i == j.i:
			return True
		return False



class Tree:
	root: ITNode
	rootRef: ITNode
	pairs: dict[Interval, set[Interval] ]

	def __init__(self: Tree):
		self.root = None
		self.rootRef = None
		self.pairs = dict[Interval, set[Interval] ]()
	def newNode(self: Tree, i: Interval):
		t = ITNode(i)
		return t
	def insert1(self: Tree, i: Interval, i_ref: Interval):
		self.insert(self.rootRef,i_ref)
		self.insert(self.root,i)
		self.pairs.setdefault(i,set[Interval]()).add(i_ref)
	def insert(self: Tree,root:ITNode, i: Interval):
		# print f'ok'
		if (not self.root):
			self.root = self.newNode(i)
			return root
		if (not self.rootRef):
			self.root = self.newNode(i)
			return root
		if (not root):
			root = self.newNode(i)
			# print root
			return root
		l = root.i.low
		if (i.low < l):
			root.left = self.insert(root.left,i)
		else:
			root.right = self.insert(root.right,i)
		
		if (root.max < i.high):
			root.max = i.high
		return root
	def doOverlap(self:Tree,i1: Interval, i2: Interval):
		if (i1.low<=i2.high and i2.low <= i1.high):
			return True
		return False
	def doOverlapOne(self:Tree,i2: Interval,i1: int):
		if (i1<=i2.high and i1 <= i2.low):
			return True
		return False
	def overlapSearch1(self:Tree ,i:Interval,l:list[Interval],is_root: bool) -> list[Interval]:
		m=list[Interval]()
		if (is_root):
			m = self.overlapSearch(self.rootRef, i,l)
		else:
			m = self.overlapSearch(self.root, i,l)
		return m
	def overlapSearch(self:Tree,root: ITNode, i:Interval,l:list[Interval]):
		if not (root):
			return l
		if (self.doOverlap(root.i,i)):
			l.append(root.i)
			# return root.i
		if ((root.left) and root.left.max >= i.low):
			self.overlapSearch(root.left, i,l)
		self.overlapSearch(root.right, i,l)
	def overlapSearchOne(self:Tree,root: ITNode, i:int,l:list[Interval]):
		if not (root):
			return l
		if (self.doOverlapOne(root.i,i)):
			l.append(root.i)
			# return root.i
		if ((root.left) and root.left.max >= i):
			self.overlapSearchOne(root.left, i,l)
		self.overlapSearchOne(root.right, i,l)
		return l
	def find(self:Tree ,i:int,is_ref: bool) -> list[Interval]:
		l = list[Interval]()
		m=list[Interval]()
		if (is_ref):
			m = self.overlapSearchOne(self.rootRef, i,l)
		else:
			m = self.overlapSearchOne(self.root, i,l)
		return m
	def find1(self:Tree,root: ITNode, i:int,l:list[Interval]):
		if not (root):
			return l
		if (self.doOverlapOne(root.i,i)):
			l.append(root.i)
			# return root.i
		if ((root.left) and root.left.max >= i.low):
			self.find1(root.left, i,l)
		self.find1(root.right, i,l)
		return l
	def findPairsWithinTheRefference(self: Tree, pos: int, pf: list[Interval]) -> list[Interval]:
		l = self.find(pos,True)
		k = list[Interval]()
		for i in l:
			for j in pf:
				if i in self.pairs[j]:
					k.append(j)
					break
		return k


	def __str__(self:Tree):
		k =self.root
		s = "Left:"
		while k:
			s+= f'{k}\t'
			k=k.left
		s += "Right:"
		k =self.root.right
		while k:
			s+= f'{k}\t'
			k=k.right
		return s
	# def __iadd__(self, other):

		

# i=Interval(2,5)
# i2 = Interval(3,9)
# i4 = Interval(66,666)
# i3=Interval(2,6)

# t = Tree()
# t.insert1(i)
# t.insert1(i2)
# t.insert1(i4)

# l = list[Interval]()
# m = t.overlapSearch1(i3,l)
# print f'{t}'
# print "Overlap:"
# for i in m:	
# 	print i
# print f'{t}'
# i=Interval(2,5)
# i2 = Interval(3,9)

# root = ITNode(Interval(1,2))
# insert(root,i)
# insert(root,i2)
# i3=Interval(2,6)
# l = list[Interval]()
# m = overlapSearch(root,i3,l)
# print "Overlap:"
# for i in m:	
# 	print i
# print f'{isprintaj(root)}'


# if not (m is None):
#     print f'{m}'