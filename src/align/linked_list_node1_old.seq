
class Linked_list_node:
    begin: int

    end: int


    chr_: int
    age: int
    count: int
    gap: int
    inner_gap: int

    
    next: Optional[Linked_list_node]


    potentional: bool
    score: int
    
    
    def __init__(self: Linked_list_node, begin: int, end: int, chr_:int,next: Optional[Linked_list_node], age: int,count: int, potentional: bool, score:int, gap:int, inner_gap:int):
        
        self.begin = begin
        self.end = end

        self.chr_ = chr_
        self.next = next
        self.age = age
        self.count = count
        self.potentional = potentional
        self.score = score
        self.gap = gap
        self.inner_gap = inner_gap

    def __init__(self: Linked_list_node):
        self.begin = 0
        self.end = 0

    def __init__(self: Linked_list_node, first: int, chr_:int):
        
        self.begin = first
        self.end = first + 10

        self.chr_ = chr_
        # self.next = Linked_list_node()
        self.next = None

        
        self.age = 0
        self.count = 0
        self.potentional = False
        self.score = 0
        self.gap = 0
        self.inner_gap = 0

    def __init__(self: Linked_list_node, first: int,chr_:int, next_: Optional[Linked_list_node] ):
        self.begin = first
        self.end = first + 10
        self.chr_ = chr_
        self.next = next_
        self.age = 0
        self.count = 0
        self.potentional = False
        self.score = 0
        self.gap = 0
        self.inner_gap = 0
    def __init__(self: Linked_list_node, first: int, last:int,chr_:int, next_: Optional[Linked_list_node],  age:int, count:int):
        self.begin = first
        self.end = first + 10
        self.chr_ = chr_

        self.next = next_

        self.age = age
        self.count = count
        self.potentional = False
        self.score = 0
        self.gap = 0
        self.inner_gap = 0

    def insert_after(self: Linked_list_node, first: int,chr_:int, age: int = 1, count:int = 1):
        new_node = Linked_list_node(first,first,chr_, self.next,age,count)
        self.next = new_node
    
    def insert_after2(self: Linked_list_node, begin: int, lens: int, chr_:int,next:Optional[Linked_list_node], age: int,count: int, potentional: bool, score:int, gap:int, inner_gap:int):
        new_node = Linked_list_node(begin,lens,chr_, self.next,age,count,potentional,score,gap,inner_gap)
        self.next = new_node
        

    # def insert_after_node(self: Linked_list_node,other:Linked_list_node):
    #     self.next = other
    def __str__(self: Linked_list_node):
        s=""
        walker = Optional[Linked_list_node]()
        walker = self
        while not walker is None:
            s+=f'(chr: {walker.chr_}; begin: {walker.begin}; end: {walker.end}; gap: {walker.gap}; score: {walker.score})->'
            walker = walker.next
        return s
    # def __len__(self: Linked_list_node):
    #     i = 0
    #     walker = self
    #     assert False
    #     while walker:
    #         i+=1
    #         walker = walker.next
    #     return i
    def __eq__(self: Linked_list_node, other: Linked_list_node)-> bool:
        return self.begin == other.begin and self.end == other.end


    # def swap(self: Linked_list_node, other: Linked_list_node):
    #     self.begin, other.begin = other.begin, self.begin
    #     self.lens, other.lens = other.lens, self.lens

    #     self.chr_, other.chr_ = other.chr_, self.chr_

    #     self.age, other.age = other.age, self.age
    #     self.count, other.count = other.count, self.count
    #     self.gap, other.gap = other.gap, self.gap
    #     self.inner_gap, other.inner_gap = other.inner_gap, self.inner_gap
    #     self.potentional, other.potentional = other.potentional, self.potentional
    #     self.score, other.score = other.score, self.score






        
