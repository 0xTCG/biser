from linked_list_node3 import Linked_list_node
import sys
from time import time
# from typing import Optional
from bio import FASTA

from time import *
from globals import *
from common import *
# from util import *
# from pair import *
from linked_list_node3 import *
from bisect import bisect_left

max_chain_coverage = 0
max_chain = list[tuple[int,int,int,int]]()

def analyze_region(s1,s2):
	if len(s1) != len(s2):
		print 'error lens'
		print len(s1), len(s2)
		assert False
	# assert len(s1) == len(s2)
	miss_ = 0
	for i in range(0,len(s1)):
		if s1[i] != s2[i]:
			miss_ += 1
		
	return len(s1) - miss_, miss_


def get_stats_for_cigar(s1,s2,cigar):
	count1 = 0
	count2 = 0
	match_ = 0
	miss = 0
	gap_I = 0
	gap_D = 0

	for br,let in cigar:
		if let == 'I':
			count1 += br
			gap_I+=br
		elif let == 'D':
			count2+=br
			gap_D+=br
		else:
			mt,ms = analyze_region(s1[count1:count1+br],s2[count2:count2+br])
			match_	+= mt
			miss	+= ms

			count2	+= br
			count1	+= br
	if match_ + miss + gap_I != len(s1) or match_ + miss + gap_D != len(s2):
		print 'error'
		print match_ + miss + gap_I, len(s1)
		print match_ + miss + gap_D,len(s2)
		sys.exit(1)
	assert match_ + miss + gap_I == len(s1)
	assert match_ + miss + gap_D == len(s2)

	return match_, miss, gap_I + gap_D

def can_add(list_nodes: list[Linked_list_node], node: Linked_list_node):
	
	counter = len(list_nodes) - 1
	been_there = False

	while counter >= 0:
		
		current = list_nodes[counter]

		if node.cont_1( current ):
			# print f'Current being deleted: {current.query[0]} - {current.query[-1] + current.lens[-1]}, {current.ref[0]} - {current.ref[-1]  + current.lens[-1]}, {current.score},  {current.gap},  {current.inner_gap}'

			del list_nodes[counter]

		elif current.cont_1( node ):
			# print f'Current containing this one: {current.query[0]} - {current.query[-1] + current.lens[-1]}, {current.ref[0]} - {current.ref[-1]  + current.lens[-1]}, {current.score},  {current.gap},  {current.inner_gap}'

			return False
			
			# return True

		counter -= 1
	
	return True

# def filter(best_nodes):
def check_it(threads):
	count1 = 0
	walker = threads
	while walker.next:
		count1+=1

		walker = walker.next
	
	count2 = 0

	while walker.previous:
		count2 += 1
		walker = walker.previous
	# print f'Check it: {count1}, {count2}'
	if count1 != count2:
		sys.exit(1)
	# assert(count1 == count2)

def gap_size(e1,b2):
	return b2 - e1

gapLenForSW = 300


SEARCH_MAX_EDIT_ERROR = 0.15
kmer_size = 10
min_mate_len = 9 # 300 # 100# 2# 100
min_mate_similarity = 0.6


def add_to_tree_align(threads: Optional[Linked_list_node], minimizers_dict_list: list[tuple[int,int]], current: int,current_chr:int, difference: int , croms = list[str](), lens_dict = dict[int,int](), dict_final_sds = dict[str,list[str]]() , best_nodes: list[tuple[int,int,int]] = list[tuple[int,int,int]](), first_query:int = -1, first_ref:int = -1) -> Optional[Linked_list_node]:

	minimizer_index = len(minimizers_dict_list) - 1
	node_counter = 0

	length = len(minimizers_dict_list)
	
	

	# if certain values in the beginning of the minimizers_dict_list are lower that first node, add them all beforehand
	walker = threads
	previous = Optional[Linked_list_node]()
	previous = threads #threads
	previous = None
	holder = threads
	while not threads is None and minimizer_index >= 0 and ( minimizers_dict_list[minimizer_index][1] > threads.query[-1] + threads.lens[-1]  + difference - kmer_size): # and  current > threads.ref[-1] + threads.lens[-1]  + difference - kmer_size ):
		
		walker = Linked_list_node(minimizers_dict_list[minimizer_index][1], minimizers_dict_list[minimizer_index][1], current, minimizers_dict_list[minimizer_index][0], threads, previous,0,1)
		walker.score += kmer_size
		node_counter += 1
		if previous:
			previous.next = walker
		else:
			holder = walker
		previous = walker
		minimizer_index-=1

	if not threads is None and not walker is threads:
		threads.previous = walker

	walker = threads
	threads = holder
	
	while not walker is None:
		inserted = False
		node_counter += 1

		case_ = 0

		if minimizer_index >= 0 and walker.ref[-1] != current and (walker.query[-1] + walker.lens[-1] - kmer_size ) <  minimizers_dict_list[minimizer_index][1] and (walker.query[-1] + walker.lens[-1] + difference) >= minimizers_dict_list[minimizer_index][1] and (walker.ref[-1] + walker.lens[-1] + difference ) >= current and (walker.ref[-1]  + walker.lens[-1] - kmer_size) < current:
			
			walker.lens[-1] += 1
			walker.score += 1
			walker.gap = 0
			walker.count+=1
			# go to next element in the list, not on the next node bc we might append new node after this one

			minimizer_index-=1
			# walker = walker.next
			walker.potentional = True


			# continue
		# now the cse where we insert a new node
		if minimizer_index >= 0 and (not walker.next or ( walker.next.query[-1] + walker.next.lens[-1] + difference < minimizers_dict_list[minimizer_index][1]) ):
	
			walker.insert_after(minimizers_dict_list[minimizer_index][1], current, minimizers_dict_list[minimizer_index][0],1,1)
			walker.next.score += kmer_size
			minimizer_index-=1
			inserted = True
			walker.next.potentional = True

		if not walker.potentional:
			# add this node to the return list
			best_nodes.append( (walker.query[-1], walker.ref[-1], walker.lens[-1]) )


			# delete that node
			if walker is threads:
				# print f'pod 1'
				help_ = Optional[Linked_list_node]
				help_ = threads.next
				threads.next = None
				threads = help_
				if threads:
					threads.previous = None
				case_ = 1
				# print f'pod 1_2 {threads}, {help_}'

			else:
				if walker.next is None:
					walker.previous = None
					previous.next = None
				else:
					case_ = 3
					previous.next = walker.next
					walker.next.previous = previous
					walker.previous = None
					walker.next = None
		walker.potentional = False
		# go to next node
		if case_ == 3:
			walker = previous.next
		elif case_ == 1:
			walker = threads
		else:
			previous = walker
			walker = walker.next


	while minimizer_index >= 0:
		node_counter += 1

		if not threads:
			threads = Linked_list_node(minimizers_dict_list[minimizer_index][1], minimizers_dict_list[minimizer_index][1],current,minimizers_dict_list[minimizer_index][0], None, None, 1, 1)
			threads.score += kmer_size
			previous = threads
		else:
			previous.insert_after(minimizers_dict_list[minimizer_index][1], current,minimizers_dict_list[minimizer_index][0])

			previous = previous.next
			previous.score += kmer_size
		minimizer_index-=1

	return threads



def dict_align(s1:seq,s2:seq, best_nodes,first_q, first_r) -> Optional[Linked_list_node]:
	len_ref		= len(s1)
	len_query 	= len(s2)

	# play with this later
	difference = 1 #1 # 60
	
	kmer_size = 10

	ref_dict = dict[int, list[tuple[int,int]]]()
	step = 1
	loc = 0
	threads = Optional[Linked_list_node]()
	threads = None
	dict_final_sds = dict[str,list[str]]()

	for i in s1.kmers[Kmer[10]](step):
		i_ = int(i.as_int())

		if i_ in ref_dict:
			ref_dict[i_].append((0,loc))
		else:
			ref_dict[i_] = [(0,loc)]
		loc += 1

	loc = 0
	step = 1

	helper = list[tuple[int,int]]()
	for i in s2.kmers[Kmer[10]](step):
		# print loc
		i_ = int(i.as_int()) 
		if i_ in ref_dict:

			threads = add_to_tree_align(threads, ref_dict[i_], loc, 1, difference,["0","1"],[len_ref, len_query],dict_final_sds,best_nodes, first_q, first_r)

		else:
			threads = add_to_tree_align(threads, helper, loc, 1, difference,["0","1"],[len_ref, len_query],dict_final_sds,best_nodes, first_q, first_r)

		loc += step

	walker = threads
	while walker:
		if walker.query[-1]  + walker.lens[-1] - walker.query[0] > min_mate_len :#and (walker.score) / (walker.score + (walker.inner_gap)) > min_mate_similarity:# (walker.query[-1] - walker.query[0]) / (walker.query[-1] - walker.query[0] + walker.inner_gap / 3) > min_mate_similarity:# and walker.count * 10 /(walker.count * 10 + walker.inner_gap):
			# if can_add(best_nodes, walker):
			
				# best_nodes.append( walker )
			best_nodes.append( (walker.query[-1], walker.ref[-1], walker.lens[-1] ))


		walker = walker.next
	return threads


def align_new(s1,s2,first_q, first_r):

	best_nodes = list[tuple[int,int,int]]()
	
	threads = dict_align(s1,s2,best_nodes,first_q, first_r)

	# print f'len of best nodes: {len(best_nodes)}'
	return best_nodes



def align(path_to_bed_file, path_to_fa1, path_to_fa2,destination_path = 'test', wgac = False,dict_1 = dict[str, seq](),dict_2 = dict[str, seq]()):

	counter = 0
	failed_ = 0

	fa1 = FASTA(path_to_fa1)
	name = path_to_bed_file.split('/')[-1]
	p = name.split('_')

	specie1 = path_to_fa1.split('/')[-1].split('_')[0] + '#'
	specie2 = path_to_fa2.split('/')[-1].split('_')[0] + '#'
	print 'species:', specie1, specie2

	if dict_1 == dict[str, seq]():
		if len(p) == 3 and not wgac:
			dict_1[specie1+p[0]] = FASTA(path_to_fa1)[p[0]]
			dict_1[specie1+p[1]] = FASTA(path_to_fa1)[p[1]]
			dict_2[specie2+p[0]] = FASTA(path_to_fa2)[p[0]]
			dict_2[specie2+p[1]] = FASTA(path_to_fa2)[p[1]]
		else:
			for i in fa1:
				dict_1[specie1+i.name] = i.seq

			for i in FASTA(path_to_fa2):
				dict_2[specie2+i.name] = i.seq
	if destination_path[-1] != '/':
		destination_path+= '/'
	print f'{destination_path}{name}_aligned'
	output = open(f'{destination_path}{name}_aligned','w')
	# print f'{destination_path}{name}_aligned'
	
 
	
	
	final_list_SDs = list[str]()

	count = 0
	

	for i in open(path_to_bed_file).readlines():
		# print count
		# i = "chr13	55244	198097	chr21:15062909	0	+	chr21	867341	1019346	289664"
		if wgac:
			line = i.split('\t')
			# print line
			chr1 = line[0]
			start1 = int(line[1])
			end1 = int(line[2])

			strand_ = True if line[5] == '_' else False
			chr2 = line[6]
			start2 = int(line[7])
			end2 = int(line[8])

			if (end1 - start1 < 2):
				continue
			
			# s1 = s'AAGGACGCTTAGCTGACTGACTGGGCATAAGCTAAGCTAAAGATTTGAGGAAGGGGATA'
			# s2 = s'AAGGACGCTTAGCTGACTGACCGGGCATAAGCTAAGCTGATTTGAGGAAGGGCGATA'

			s1 = dict_1[chr1][start1 : end1]
			s2 = dict_2[chr2][start2 : end2] if not strand_ else ~dict_2[chr2][start2 : end2] 

			overall_coverage = 0
		
			# with timing('main'):

			# rez = align_new(s1,s2,-1,-1)
			rez = align_new(s1,s2,-1,-1)

		
			for rez_ in rez:
				# output.write(f'{}')

				print rez_
			count +=1
			
			# break
		else:
			# print count
			line = i.split('\t')
			chr1, specie1 = (line[0].split('_')[0], line[0].split('_')[1]) if len(line[0].split('_')) > 1 else (line[0], '')
			
			start1 = int(line[1])
			end1 = int(line[2])

			chr2, specie2 = (line[3].split('_')[0], line[3].split('_')[1]) if len(line[3].split('_')) > 1 else (line[3], '')

			start2 = int(line[4])
			end2 = int(line[5])

			strand = line[9]
			# print strand
			seq1 = dict_1[chr1][start1 : end1]
			seq2 = dict_2[chr2][start2 : end2] if  strand == '+' else ~dict_2[chr2][start2 : end2]
			if chr1 == chr2:
				assert(start2 >= start1)
			
			first_q = -1
			first_r = -1
			if chr1 == chr2 and strand == '+':
				m1 = max(start1,start2)
				m2 = min(end1,end2)
				len_ = m2 - m1
				if len_ > 0:
					first_q = start1
					first_r = start2
			rez_ = list[tuple[int,int,int]](align_new(seq1,seq2, first_q, first_r ))
			
			# print rez_
			for rez in rez_:
				print rez
				
			count += 1
		break
		





def main():
	# if len(sys.argv) == 1:
	# 	align('data/wgac_without_cigar_remove_doubles_rev_50.bed', 'data/genomes/hg19_hard_50.fa', 'data/genomes/hg19_hard_50.fa', 'test/' ,True)

	if len(sys.argv) == 2:
		align(sys.argv[1], '/home/hiseric1/new_sedef/seq/search/data/genomes/hg19_hard_50.fa', '/home/hiseric1/new_sedef/seq/search/data/genomes/hg19_hard_50.fa', '/home/hiseric1/new_sedef/biser/src/results/test_align/' ,False)
	elif len(sys.argv) == 4:
		align(sys.argv[1], sys.argv[2], sys.argv[3], 'test/' ,False)
	elif len(sys.argv) == 5:
		with timing(sys.argv[1]):
			align(sys.argv[1], sys.argv[2], sys.argv[3], sys.argv[4] ,False)
		


with timing(str(sys.argv)):
	main()

# align('data/wgac_without_cigar_remove_doubles_rev_50.bed', 'data/genomes/hg19_hard_50.fa', 'data/genomes/hg19_hard_50.fa', 'data/' ,True)

def main_all():
	croms = list[str]()
	croms2 = list[str]()
	mainFa='data/genomes/hg19_hard_50.fa'
	secondFa='data/genomes/hg19_hard_50.fa'

	path_to_beds = 'final/merged/'
	dest_folder = 'final/aligned/'

	if len(sys.argv) > 1:
		mainFa=sys.argv[1]
		secondFa=sys.argv[2]

		path_to_beds = sys.argv[3]
		dest_folder = sys.argv[4]
	
	print 'in seq:'
	print mainFa,secondFa, path_to_beds,dest_folder
	# sys.exit(1)
	
	name = mainFa.split('/')[-1].split('_')[0]
	for i in open(mainFa+'.fai', 'r').readlines():
		
		
		line = i.split('\t')
		if not '_' in line[0] and line[0] != 'chrM':
			
			# main_dict[line[0]] = list[SD]()
			croms.append(f'{line[0]}')
	name2 = secondFa.split('/')[-1].split('_')[0]
	for i in open(secondFa+'.fai', 'r').readlines():
		
		
		line = i.split('\t')
		if not '_' in line[0] and line[0] != 'chrM':
			
			# main_dict[line[0]] = list[SD]()
			croms2.append(f'{line[0]}')
	# print croms
	dict_1 = dict[str, seq]()
	dict_2 = dict[str, seq]()
	for i in FASTA(mainFa):
		dict_1[i.name] = i.seq

	for i in FASTA(secondFa):
		dict_2[i.name] = i.seq
	with timing('all'):
		for i in range(0, len(croms)):
			for j in range(i,len(croms2)):
				
				for str_ in ['y','n']:
					# f1 = open(f'{path_to_beds}{croms[i]}_{croms[j]}_{str_}.bed','r')
					with timing(f'{croms[i]} and {croms[j]}, {str_}'):
						# if croms[i] != croms[j]:
						try:
							align(f'{path_to_beds}{croms[i]}.{name}_{croms2[j]}.{name2}_{str_}.bed_merged', mainFa, secondFa, dest_folder, False, dict_1,dict_2)
						except:
							print f'No file: {path_to_beds}{croms[i]}.{name}_{croms2[j]}.{name2}_{str_}.bed_merged'

# main_all()

# align('data/wgac_without_cigar_remove_doubles_rev_50.bed', 'data/genomes/hg19_hard_50.fa', 'data/genomes/hg19_hard_50.fa', 'test/' ,True)
