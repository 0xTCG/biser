
# import util
import sys
from align3 import *
from PrioritySearch import *

def chain_len(anchors, chain):
	return max(abs(anchors[chain[-1]][0] + anchors[chain[-1]][2] - anchors[chain[0]][0]), abs(anchors[chain[-1]][1] + anchors[chain[-1]][2] - anchors[chain[0]][1]) )

def process_item(x, y, line = ''):
	# Find SMEM anchors
	t = time()
	# print x
	# print y

	# anchors1 = get_ancors(x, y)
	# print time() - t
	# print len(anchors1)
	# for anch in sorted(anchors1):
	# 	print anch
	
	# print 'ancors 2:'
	# t = time()
	anchors = align_new(x,y,-1, -1)
	# print time() - t
	# print len(anchors)

	# if line != '' :
	# best anchoring (old one actually):
	# from old_align.Seq.chain import *
	# t = time()
	# anchors = generate_anchors2(str(x),str(y), Hit.from_bed(line), 10)
		# print time() - t
		# print len(anchors2)
		# for i in anchors2:
		# 	if not i in anchors:
		# 		print i
			# assert anchors == anchors2
		


	# for anch in sorted(anchors1):
	# 	if not anch in anchors:
	# 		print anch
	#  t = time()
	# print anchors
	
	# print f'Ancors generated. # of anchros: {len(anchors)}'
	# Chain them
	chains = list[list[int]]()
	# with timing('Chain'):
	chains = chain(anchors)
	# print(f'found {len(chains)} chains')
	return anchors, chains


def get_cigar(anchors, chain, s1, s2):
	all_match = 0
	all_miss = 0
	all_gap = 0
	all_sim = 0.0
	cigar = list[tuple[int,str]]()

	for i in range(0 , len(chain) - 1):
		curent_len = anchors[chain[i]][2]
		all_match += curent_len

		start1 = anchors[chain[i]][0]
		end1 = anchors[chain[i]][0] + curent_len

		start1_next = anchors[chain[i + 1]][0]
		end1_next = anchors[chain[i + 1]][0] + anchors[chain[i + 1]][2]

		start2 =  anchors[chain[i]][1]
		end2 = anchors[chain[i]][1] + curent_len

		start2_next =  anchors[chain[i + 1]][1]
		end2_next = anchors[chain[i + 1]][1] + anchors[chain[i + 1]][2]

		gap1 =  start1_next - end1
		gap2 =  start2_next - end2
		match_reg = curent_len
		
		cigar.append( (match_reg, 'M') )
		# print f'Gaps: {gap1}, {gap2}, {end1}, {end2}, {len(s1)}, {len(s2)}'

		if (gap1 <= 0 and gap2 > 0) or (gap1 > 0 and gap2 <= 0):# or ((gap1 > 0 and gap2 > 0) and (gap1 / gap2 < 0.07 or gap2 / gap1 < 0.07  )):
			
			if gap1 > 0:
				all_gap+=gap1
				cigar.append((gap1 , 'I') )
			if gap2 > 0:
				all_gap+=gap2
				cigar.append((gap2 , 'D') )
		elif gap1 > 0 and gap2 > 0:
			aln = s1[ end1 : start1_next].align( s2[ end2 : start2_next],1,2,2,40,1)
			# try:
			match_, miss_, gap = get_stats_for_cigar( s1[ end1 : start1_next],s2[ end2 : start2_next], aln.cigar)
			# print aln.cigar, s1[ end1 : start1_next],  s2[ end2 : start2_next], match_, miss_, gap
			all_match += match_
			all_miss += miss_
			all_gap += gap
			# maybe cigar.ext(aln.cigar)
			for num, let in aln.cigar:
				cigar.append((num, let))
			# except:
			# 	print s1[ end1 : start1_next],s2[ end2 : start2_next], aln.cigar
			# 	print 'belaj'
		else:
			print 'error main'
			print gap1, gap2
			print 
			# sys.exit(1)
	match_reg = anchors[chain[-1]][2]
	cigar.append( (match_reg, 'M') )
	all_match += match_reg

	final_start1 = anchors[chain[0]][0]
	final_end1 = anchors[chain[-1]][0] + anchors[chain[-1]][2]

	final_start2 = anchors[chain[0]][1]
	final_end2 =  anchors[chain[-1]][1] + anchors[chain[-1]][2]
	similarity = all_match / (all_match + all_miss + all_gap)

	final_cigar = ''
	final_cig_helper = list[tuple[int, str]]()
	# get_stats_for_cigar(s1[final_start1:final_end1],s2[final_start2:final_end2],cigar)
	for br, let in cigar:
		if len(final_cig_helper) == 0:
			final_cig_helper.append((br,let))
			continue
		if let == final_cig_helper[-1][1]:
			final_cig_helper[-1] = (final_cig_helper[-1][0] + br, let) 
		else:
			final_cig_helper.append((br,let))
	for num, let in final_cig_helper:
		final_cigar += f'{num}{let}'
	
	# get_stats_for_cigar(s1[final_start1:final_end1],s2[final_start2:final_end2],CIGAR(final_cigar))
	# print 'ok'
	# print final_start1,final_end1,final_start2,final_end2, similarity, all_match, all_miss, all_gap, final_cigar
	# if final_end1 - final_start1 > 200 and similarity > 0.6:
	if similarity > 0.6:
		return final_cigar, all_match, all_miss, all_gap,similarity,final_start1,final_end1,final_start2,final_end2





fasta_path = sys.argv[1]
bed_path = sys.argv[2]
chr1 = ''
chr2 = ''
specie = ''

if len(sys.argv) > 3:
	chr1 = sys.argv[3]
	chr2 = sys.argv[4]
	specie = sys.argv[5]

# Read the reference
ref = dict[str, seq]()#seq()

with timing('FASTA'):
	with FASTA(fasta_path) as f:
		for i in f:
			if chr1 == '' or i.name in [chr1, chr2]:
				if specie != '':
					ref[f'{specie}#{i.name}'] = i.seq
				else:
					ref[f'{i.name}'] = i.seq


# Read BED
coords = list[tuple[str, int, int, str, int, int, bool, str]]()
with timing('BED'):
	with open(bed_path) as f:
		for l in f:
			# l = 'hg19#chr1	113530	124000	hg19#chr2	56038397	56048867	False		+	+'
			li = l.strip().split('\t')
			# diff = 5076
			# diff2 = diff + 100
			coords.append((li[0], int(li[1]) , int(li[2]) , li[3], int(li[4]) , int(li[5]) ,  li[9] == '-', l))
			# for new align



		# break

with timing ('Everything'):
	count = 0
	for xchr, xs, xe, ychr, ys, ye, rev, line in coords:
		s1 = ref[xchr][xs:xe]
		s2 = ref[ychr][ys:ye] if not rev else ~ref[ychr][ys:ye]
		print count, xchr, xs, xe, ychr, ys, ye, rev

		anchors, chains = process_item(s1, s2, line)
		count += 1
		for chain_ in chains:
			# print chain_len(anchors, chain_)
			if chain_len(anchors, chain_) > min_len:
				chain2 = list[int]()
				for i_ in range(len(chain_) - 1, -1, -1):
					chain2.append(chain_[i_])
				rez = get_cigar(anchors, chain2, s1, s2)
				# print rez
				# print len(s1),len( s2)
				# print s1[rez[7] : rez[8]]
				# print s2[rez[5] : rez[6]]
