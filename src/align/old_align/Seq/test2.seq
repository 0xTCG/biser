# # s = s'AAACC'
# # for i in range(0,len(s)):
# #     print s[i]

# from align_hit import *
# from Tree import *
# from hash import *
# from sliding import *
# from globals import*
# from common import *
# # from extendedFunctions import *
# # s = AVL[Hash, str]()
# # h = Hash(2,0)
# # s.insert(h,"hehe")


# def search1(query_winnow_start: int, query_hash: Index, ref_hash: Index, tree: Tree, same_genome: bool,init_len: int, allow_extend:bool, report_fails:bool) -> list[Hit]:
#     variabl = 14

#     internal = Internal()
#     hashG = HashGlobal()

#     # m = SlidingMap(variabl)

# def funkc2(k: int):
#     variabl = 14

#     internal = Internal()
#     hashG = HashGlobal()

#     m = SlidingMap(variabl)

# funkc2(13)

# # search1()
# def lowerBound_binarySearch (arr, l, r, x): 
  
#     # Check base case 
#     if r >= l: 
  
#         mid = l + (r - l)//2
#         # If element is present at the middle itself 
#         if arr[mid] == x: 
#             return mid
#         # If element is smaller than mid, then it can only 
#         # be present in left subarray 
#         elif arr[mid] > x: 
#             return lowerBound_binarySearch(arr, l, mid-1, x)
#         # Else the element can only be present in right subarray 
#         else: 
#             return lowerBound_binarySearch(arr, mid+1, r, x)
#     else: 
#         # Element is not present in the array 
#         return l - 1

# def binary(my_list:list[int], begin:int, end:int, key:int) -> int:
#     print f'{begin} {end}'
#     if (begin == end ):
#         return begin
#     if ((begin == end -1 ) and my_list[begin] <= key and my_list[end]>= key):
#         return begin
#     elif(begin > end):
#         return begin
#     mid = int((end- begin) /2)
#     value = my_list[mid]
#     if value > key:
#         begin = mid
#     else:
#         end = mid

    # lower = begin if value < key else mid-1
    # upper = end if value > key else mid+1
    # return binary(my_list,begin, end, key)

l = [1,1,2,4,5,7,8,10,11,1203]
print(lowerBound_binarySearch(l,0,len(l)-1,1))