from align_hit import *


def merge(hits: list[Hit], merge_dist: int) -> list[Hit]:
    results = list[Hit]()
    for h in hits:
        assert(h.ref)
        assert(h.query)
        if(h.query.name > h.ref.name and h.query_start > h.ref_start and h.query_end > h.ref_end):
            temp = h.query.name
            h.query.name = h.ref.name
            h.ref.name = temp

            temp1 = h.query_start
            h.query_start = h.ref_start
            h.ref_start = temp1

            temp1 = h.query_end
            h.query_end = h.ref_end
            h.ref_end = temp1
        
    #hits = sorted(hits)

    prev = Hit()
    rec = Hit()
    wcount = 0
    nread = 0
    windows = list[tuple[int,Hit]]()
    for rec in hits:
        assert(rec.query.is_rc == False)
        if(rec.query.name == rec.ref.name and rec.query_start == rec.ref_start and rec.query_end == rec.ref_end):
            continue
        if(rec == hits[0]):
            windows.append((rec.ref_end,rec))
            prev = rec
            wcount+=1
            
        elif(prev.query_end+merge_dist<rec.query_start or prev.query.name != rec.query.name or prev.ref.name != rec.ref.name or prev.ref.is_rc != rec.ref.is_rc):
            for it in windows:
                results.append(it[1])
                windows = list[tuple[int,Hit]]()
                windows.append((rec.ref_end,rec))
                prev = rec
                wcount+=1 
        
        else:
            needUpdate = True
            while(needUpdate):
                #start_loc = lower_bound
                needUpdate = False
                #while(start_loc != )
                start_loc=0
                while(start_loc<len(windows)):

                    if(windows[start_loc][1].query_end + merge_dist < rec.query_start or windows[start_loc][1].ref_end < rec.ref_start-merge_dist or windows[start_loc][1].ref_start > rec.ref_end+merge_dist):
                        start_loc+=1
                        continue
                    needUpdate = True
                    rec.query_end = max(rec.query_end, windows[start_loc][1].query_end)
                    rec.ref_end = max(rec.ref_end, windows[start_loc][1].ref_end)
                    rec.query_start = max(rec.query_start,windows[start_loc][1].query_start)
                    rec.ref_start = max(rec.ref_start,windows[start_loc][1].ref_start)
                    windows.pop(start_loc)
                    start_loc+=1
            
            windows.append((rec.ref_end,rec))
            
            rec.query_end = max(rec.query_end,prev.query_end)
            prev = rec

            
    for it in windows:
        results.append(it[1])
    return results