# # from hash import *
# # from bio import CIGAR
# # # from align import *
# # from globals import *
# # # from hit import *
# # from align_hit import *
# # import math
# # from merge import *
# # from time import *
# # from segment import *



# # # toBinary(10000)
# # # size = (1 << (32 - (32-len(string))))
# # # print(size)

# # # toBinary(17)
# # # print(string)
# # # leading_zeros = len(string.split('1', 1)[0]

# # line1 = "chr11   108692452   108693443   chr2    100986072   100987075       18.9    +   +   1003    1024    104M1I126M2D114M10I85M4I29M15I26M1I103M4D22M15D301M2I60M    m=13.7;g=5.3"
# # # z = Hit.from_bed(line)
# # line = "chr1	59494	113596	chr2	243152005	243189865			+	+	54102	0		;OK"
# # z = Hit.from_bed(line)
# # q = line.split()
# # r = line1.split()

# # print(q)
# # # z.aln = Alignment()
# # # x = []
# # # z.aln.error = AlignmentError(1,1,1,1)
# # # print(z.aln.total_error())

# # # lines = 10
# # # total = 20
# # # fa = "hello"
# # # fb = "goodbye"
# # # kmer_size = 11
# # # i = 5
# # # h = 0
# # # ref_hashes = dict[int,list[int]]()
# # # ref_hashes.setdefault(h,list[int]()).append(i-kmer_size+1)
# # # # if h in ref_hashes.keys():
# # # #     print("not")
# # # x = ref_hashes.keys()
# # # print(x)
# # # x = 3
# # # print(x.bin())


# # testing avl tree here:
from avl import *

avl_tree = AVL[int, str]()

for i in range(0,100):
    # if (i%2 == 0):
	avl_tree[i] = f"NUM {i}"
# # avl_tree[0] = "zero"
# # avl_tree[10] = "ten"
# # avl_tree[1] = "one"
# # avl_tree[15] = "fifteen"
# # avl_tree[7] = "seven"
# # avl_tree[2] = "two"
# # avl_tree[9] = "nine"
# # avl_tree[8] = "eight"
# # avl_tree[100] = "hundred"
# # avl_tree[3] = "three"
# # avl_tree[4] = "four"
# # avl_tree[0] = "zero"
# # avl_tree[10] = "ten"
# # avl_tree[1] = "one"
# # avl_tree[15] = "fifteen"
# # avl_tree[7] = "seven"
# # avl_tree[2] = "two"
# # avl_tree[9] = "nine"
# # avl_tree[8] = "eight"
# # avl_tree[100] = "hundred"
# # avl_tree[3] = "three"

l = list[int]()
for i in avl_tree:
    l.append(i.key)
    print i
    # avl_tree.delete(i[0])
print("-----")
for i in l:
    if i %10 ==0:
        del avl_tree[i]

for i in avl_tree:

    print i
print(avl_tree.lower_bound(97))
# print(avl_tree.lower_bound(100))
# avl_tree[100] = "num"
# print(avl_tree.lower_bound(100))
# a=1
# a|=2
# print(a)
# a = 1&2
# print(a)
# # print(avl_tree.lower_bound(101))
# # print (avl_tree.next_larger(7))
# # print (avl_tree.next_larger(2))
# # print (avl_tree.next_larger(0))
# # # print (avl_tree.next_larger(100))
# # print (avl_tree.next_larger(3))
# # print (avl_tree.next_larger(15))
# # print (avl_tree.next_larger(44))
# # print (avl_tree.next_larger(78))
# # print (avl_tree.next_larger(25))
# # print (avl_tree.next_larger(31))

# # print("-------")
# # print (avl_tree.next_smaller(7))
# # print (avl_tree.next_smaller(2))
# # print (avl_tree.next_smaller(99))
# # print (avl_tree.next_smaller(15))
# # print (avl_tree.find_min())

# # from slidingO import *
# # from hash import *
# # from avl import *
# # from util import *
# # from globals import *
# # from hash import *

# # search_ = Search()
# # s = SlidingMap(12, search_)
# # h1 = Hash(10,0)
# # s.add(h1,2)

# # s.add_to_query(h1)
# # print (f'Boundary: {s.boundary}')
# # h1 = Hash(1,0)
# # s.add(h1,2)
# # s.add_to_query(h1)
# # print (f'Boundary: {s.boundary}')
# # h1 = Hash(2,0)
# # s.add(h1,2) # ----
# # s.add_to_query(h1)
# # print (f'Boundary: {s.boundary}')
# # h1 = Hash(13,0)
# # s.add(h1,2)
# # s.add_to_query(h1) #---

# # print (f'Boundary: {s.boundary}')
# # for k in s.storage:
# # 	print(f"{k}?\n")
# # print "ok"

# m = True
# for i in range(0,10):
#     if (i==5):
#         continue
#     if(m and 2 == i):
#         continue
#     print(i)

# d = dict[int, list[int]]()
# d.setdefault(1,list[int]()).append(4)

# print(d[1])
