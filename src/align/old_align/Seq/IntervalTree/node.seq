from math import log2, floor

from interval import *
def l2(num):
    return log2(num)

def fetchProp[K](i: Interval[K]):
    return i.end, i.begin

def bisect_left[K](a: list[K], x: K):
    """Return the index where to insert item x in list a, assuming a is sorted.
    The return value i is such that all e in a[:i] have e < x, and all e in
    a[i:] have e >= x.  So if x already appears in the list, a.insert(x) will
    insert just before the leftmost x already there.
    Optional args lo (default 0) and hi (default len(a)) bound the
    slice of a to be searched.
    """
    lo = 0
    if lo < 0:
        raise ValueError('lo must be non-negative')
    
    hi = len(a)
    while lo < hi:
        mid = (lo+hi)//2
        if a[mid] < x: lo = mid+1
        else: hi = mid
    return lo

def bisect_right[K](a:  list[K], x:K):
    """Return the index where to insert item x in list a, assuming a is sorted.
    The return value i is such that all e in a[:i] have e <= x, and all e in
    a[i:] have e > x.  So if x already appears in the list, a.insert(x) will
    insert just after the rightmost x already there.
    Optional args lo (default 0) and hi (default len(a)) bound the
    slice of a to be searched.
    """
    lo = 0
    if lo < 0:
        raise ValueError('lo must be non-negative')
    
    hi = len(a)
    while lo < hi:
        mid = (lo+hi)//2
        if x < a[mid]: hi = mid
        else: lo = mid+1
    return lo
class Node[K]:
    x_center: int
    s_center: set[Interval[K]]
    left_node: Node
    right_node: Node
    depth: int
    balance: int

    def __init__(self: Node, x_center: optional[int] = 0, s_center: optional[set[Interval[K]]] = set[Interval[K]](), left_node: optional[Node] = None, right_node: optional[Node] = None):
        self.x_center = x_center
        self.s_center = set[Interval[K]](s_center)
        self.left_node = left_node
        self.right_node = right_node
        self.depth = 0    # will be set when rotated
        self.balance = 0  # ditto
        self.rotate()
    def __init__(self: Node, x_center: int, s_center: set[Interval[K]]):
        self.x_center = x_center
        self.s_center = set[Interval[K]](s_center)
        self.left_node = None
        self.right_node = None
        self.depth = 0    # will be set when rotated
        self.balance = 0  # ditto
        self.rotate()
    def __init__(self: Node):
        self.x_center = 0
        self.s_center = set[Interval[K]]()
        self.left_node = None
        self.right_node = None
        self.depth = 0    # will be set when rotated
        self.balance = 0  # ditto
        self.rotate()
    def from_interval(self: Node, interval: Interval[K]) -> Node[K]:
        center = interval.begin
        return Node(center, set[Interval[K]]([interval]))
        
    def from_intervals(self: Node, intervals: set[Interval[K]]) -> Node[K]:
        if not intervals or len(intervals) ==0:
            # print "oke"
            return None
        node = Node[K]()
        node = node.init_from_sorted(sorted(intervals))
        return node
    def init_from_sorted(self: Node, intervals: list[Interval[K]]) -> Node[K]:
        # assumes that intervals is a non-empty collection.
        # Else, next line raises IndexError
        center_iv = intervals[len(intervals) // 2]
        self.x_center = center_iv.begin
        # print f' self centre {self.x_center}'
        self.s_center = set[Interval[K]]()
        s_left = list[Interval[K]]()
        s_right = list[Interval[K]]()
        for k in intervals:
            if k.end <= self.x_center:
                s_left.append(k)
            elif k.begin > self.x_center:
                s_right.append(k)
            else:
                self.s_center.add(k)
        # print f'self centre 2 {s_left}'
        # print f'self centre 2 {s_right}'
        self.left_node = self.from_intervals(set[Interval[K]](s_left))
        self.right_node = self.from_intervals(set[Interval[K]](s_right))
        
        return self.rotate()
    def center_hit(self: Node, interval: Interval[K]):
        """Returns whether interval overlaps self.x_center."""
        return interval.contains_point(self.x_center)
    
    def hit_branch(self: Node, interval: Interval[K]):
        """
        Assuming not center_hit(interval), return which branch
        (left=0, right=1) interval is in.
        """
        return interval.begin > self.x_center
    
    def refresh_balance(self: Node):
        """
        Recalculate self.balance and self.depth based on child node values.
        """
        left_depth = self.left_node.depth if self.left_node else 0
        right_depth = self.right_node.depth if self.right_node else 0
        self.depth = 1 + max(left_depth, right_depth)
        self.balance = right_depth - left_depth
    
    def compute_depth(self: Node) -> int:
        """
        Recursively computes true depth of the subtree. Should only
        be needed for debugging. Unless something is wrong, the
        depth field should reflect the correct depth of the subtree.
        """
        left_depth = self.left_node.compute_depth() if self.left_node else 0
        right_depth = self.right_node.compute_depth() if self.right_node else 0
        return 1 + max(left_depth, right_depth)
    def rotate(self: Node) -> Node[K]:
        """
        Does rotating, if necessary, to balance this node, and
        returns the new top node.
        """
        # print self.x_center
        self.refresh_balance()
        if abs(self.balance) < 2:
            return self
        my_heavy = self.balance > 0
        child_heavy = self[my_heavy].balance > 0
        if my_heavy == child_heavy or self[my_heavy].balance == 0:
            return self.srotate()
        else:
            return self.drotate()
    def srotate(self: Node) -> Node[K]:
        """Single rotation. Assumes that balance is +-2."""
        heavy = self.balance > 0
        light = not heavy
        save = self[heavy]
        #print("srotate: bal={},{}".format(self.balance, save.balance))
        #self.print_structure()
        self[heavy] = save[light]
        save[light] = self.rotate()  # Needed to ensure the 2 and 3 are balanced under new subnode

        # Some intervals may overlap both self.x_center and save.x_center
        # Promote those to the new tip of the tree
        promotees = [iv for iv in save[light].s_center if save.center_hit(iv)]
        if promotees:
            for iv in promotees:
                save[light] = save[light].remove(iv)  # may trigger pruning
            # TODO: Use Node.add() here, to simplify future balancing improvements.
            # For now, this is the same as augmenting save.s_center, but that may
            # change.
            save.s_center.update(set[Interval[K]](promotees))
        save.refresh_balance()
        return save

    def drotate(self: Node)-> Node[K]:
        # First rotation
        my_heavy = self.balance > 0
        self[my_heavy] = self[my_heavy].srotate()
        self.refresh_balance()

        # Second rotation
        result = self.srotate()

        return result
    def add(self: Node, interval: Interval[K]):
        """
        Returns self after adding the interval and balancing.
        """
        if self.center_hit(interval):
            self.s_center.add(interval)
            return self
        else:
            direction = self.hit_branch(interval)
            if not self[direction]:
                self[direction] = self.from_interval(interval)
                self.refresh_balance()
                return self
            else:
                self[direction] = self[direction].add(interval)
                return self.rotate()

    def remove(self: Node, interval: Interval[K]):
        """
        Returns self after removing the interval and balancing.

        If interval is not present, raise ValueError.
        """
        # since this is a list, called methods can set this to [1],
        # making it true
        done = list[int]()
        return self.remove_interval_helper(interval, done, should_raise_error=True)

    def discard(self: Node, interval: Interval[K]) -> Node[K]:
        """
        Returns self after removing interval and balancing.

        If interval is not present, do nothing.
        """
        done = list[int]()
        return self.remove_interval_helper(interval, done, should_raise_error=False)

    def remove_interval_helper(self: Node, interval: Interval[K], done: list[int], should_raise_error: bool) -> Node[K]:
        """
        Returns self after removing interval and balancing.
        If interval doesn't exist, raise ValueError.

        This method may set done to [1] to tell all callers that
        rebalancing has completed.

        See Eternally Confuzzled's jsw_remove_r function (lines 1-32)
        in his AVL tree article for reference.
        """
        #trace = interval.begin == 347 and interval.end == 353
        #if trace: print('\nRemoving from {} interval {}'.format(
        #   self.x_center, interval))
        if self.center_hit(interval):
            #if trace: print('Hit at {}'.format(self.x_center))
            if not should_raise_error and interval not in self.s_center:
                done.append(1)
                #if trace: print('Doing nothing.')
                return self
            try:
                # raises error if interval not present - this is
                # desired.
                self.s_center.remove(interval)
            except:
                self.print_structure()
                raise KeyError("Interval prbl")
            if self.s_center:     # keep this node
                done.append(1)    # no rebalancing necessary
                #if trace: print('Removed, no rebalancing.')
                return self

            # If we reach here, no intervals are left in self.s_center.
            # So, prune self.
            return self.prune()
        else:  # interval not in s_center
            direction = self.hit_branch(interval)

            if not self[direction]:
                if should_raise_error:
                    raise ValueError("Wrong value")
                done.append(1)
                return self

            #if trace:
            #   print('Descending to {} branch'.format(
            #       ['left', 'right'][direction]
            #       ))
            self[direction] = self[direction].remove_interval_helper(interval, done, should_raise_error)

            # Clean up
            if not done:
                #if trace:
                #    print('Rotating {}'.format(self.x_center))
                #    self.print_structure()
                return self.rotate()
            return self

    def search_overlap(self: Node, point_list: list[int]) -> set[Interval[K]]:
        """
        Returns all intervals that overlap the point_list.
        """
        result = set[Interval[K]]()
        for j in point_list:
            self.search_point(j, result)
        return result

    def search_point(self: Node, point, result: set[Interval[K]]) -> set[Interval[K]]:
        """
        Returns all intervals that contain point.
        """
        for k in self.s_center:
            if k.begin <= point < k.end:
                result.add(k)
        if point < self.x_center and self[0]:
            return self[0].search_point(point, result)
        elif point > self.x_center and self[1]:
            return self[1].search_point(point, result)
        return result

    def prune(self: Node) -> Node:
        """
        On a subtree where the root node's s_center is empty,
        return a new subtree with no empty s_centers.
        """
        if not self[0] or not self[1]:    # if I have an empty branch
            direction = not self[0]       # graft the other branch here
            #if trace:
            #    print('Grafting {} branch'.format(
            #       'right' if direction else 'left'))

            result = self[direction]
            #if result: result.verify()
            return result
        else:
            # Replace the root node with the greatest predecessor.
            heir, self[0] = self[0].pop_greatest_child()
            #if trace:
            #    print('Replacing {} with {}.'.format(
            #        self.x_center, heir.x_center
            #        ))
            #    print('Removed greatest predecessor:')
            #    self.print_structure()

            #if self[0]: self[0].verify()
            #if self[1]: self[1].verify()

            # Set up the heir as the new root node
            (heir[0], heir[1]) = (self[0], self[1])
            #if trace: print('Setting up the heir:')
            #if trace: heir.print_structure()

            # popping the predecessor may have unbalanced this node;
            # fix it
            heir.refresh_balance()
            heir = heir.rotate()
            #heir.verify()
            #if trace: print('Rotated the heir:')
            #if trace: heir.print_structure()
            return heir

    def pop_greatest_child(self: Node) -> tuple[Node[K],Node[K]]:
        """
        Used when pruning a node with both a left and a right branch.
        Returns (greatest_child, node), where:
          * greatest_child is a new node to replace the removed node.
          * node is the subtree after:
              - removing the greatest child
              - balancing
              - moving overlapping nodes into greatest_child

        Assumes that self.s_center is not empty.

        See Eternally Confuzzled's jsw_remove_r function (lines 34-54)
        in his AVL tree article for reference.
        """
        #print('Popping from {}'.format(self.x_center))
        if not self.right_node:         # This node is the greatest child.
            # To reduce the chances of an overlap with a parent, return
            # a child node containing the smallest possible number of
            # intervals, as close as possible to the maximum bound.
            ivs = sorted(self.s_center, key=fetchProp[K])
            max_iv = ivs.pop()
            new_x_center = self.x_center
            while ivs:
                next_max_iv = ivs.pop()
                if next_max_iv.end == max_iv.end: continue
                new_x_center = max(new_x_center, next_max_iv.end)
            def get_new_s_center[K](self: Node, new_x_center: int) -> Interval[K]:
                for iv in self.s_center:
                    if iv.contains_point(new_x_center): yield iv

            # Create a new node with the largest x_center possible.
            temp = set[Interval[K]]()
            for i in get_new_s_center[K](self, new_x_center):
                temp.add(i)
            child = Node(new_x_center, temp)
            self.s_center -= child.s_center

            #print('Pop hit! Returning child   = {}'.format(
            #    child.print_structure(tostring=True)
            #    ))
            #assert not child[0]
            #assert not child[1]

            if self.s_center:
                #print('     and returning newnode = {}'.format( self ))
                #self.verify()
                return child, self
            else:
                #print('     and returning newnode = {}'.format( self[0] ))
                #if self[0]: self[0].verify()
                return child, self[0]  # Rotate left child up

        else:
            #print('Pop descent to {}'.format(self[1].x_center))
            (greatest_child, self[1]) = self[1].pop_greatest_child()

            # Move any overlaps into greatest_child
            for iv in set(self.s_center):
                if iv.contains_point(greatest_child.x_center):
                    self.s_center.remove(iv)
                    greatest_child.add(iv)

            #print('Pop Returning child   = {}'.format(
            #    greatest_child.print_structure(tostring=True)
            #    ))
            if self.s_center:
                #print('and returning newnode = {}'.format(
                #    new_self.print_structure(tostring=True)
                #    ))
                #new_self.verify()
                self.refresh_balance()
                new_self = self.rotate()
                return greatest_child, new_self
            else:
                new_self = self.prune()
                #print('and returning prune = {}'.format(
                #    new_self.print_structure(tostring=True)
                #    ))
                #if new_self: new_self.verify()
                return greatest_child, new_self

    def contains_point(self: Node, p):
        """
        Returns whether this node or a child overlaps p.
        """
        for iv in self.s_center:
            if iv.contains_point(p):
                return True
        branch = self[p > self.x_center]
        return branch and branch.contains_point(p)

    def all_children(self) -> set[Interval[K]]:
        return self.all_children_helper(set[Interval[K]]())

    def all_children_helper(self: Node, result: set[Interval[K]]) -> set[Interval[K]]:
        result.update(self.s_center)
        if self[0]:
            self[0].all_children_helper(result)
        if self[1]:
            self[1].all_children_helper(result)
        return result

    def verify(self: Node, parents: optional[set[Interval[K]]]=set[Interval[K]]()):
        """
        ## DEBUG ONLY ##
        Recursively ensures that the invariants of an interval subtree
        hold.
        """
        # assert(isinstance(self.s_center, set))

        bal = self.balance
        assert abs(bal) < 2, \
            f"Error: Rotation should have happened, but didn't! \n{self.print_structure(tostring=True)}"
        self.refresh_balance()
        assert bal == self.balance, \
            f"Error: self.balance not set correctly! \n{self.print_structure(tostring=True)}"

        assert self.s_center, \
            f"Error: s_center is empty! \n{self.print_structure(tostring=True)}"
        for iv in self.s_center:
            # assert hasattr(iv, 'begin')
            # assert hasattr(iv, 'end')
            assert iv.begin < iv.end
            assert iv.overlaps(self.x_center)
            for parent in sorted(parents):
                assert not iv.contains_point(parent), \
                    "Error: Overlaps ancestor ({})! \n{}\n\n{}".format(
                        parent, iv, self.print_structure(tostring=True)
                    )
        if self[0]:
            assert self[0].x_center < self.x_center, \
                f"Error: Out-of-order left child! {self.x_center}"
            self[0].verify(parents.union([self.x_center]))
        if self[1]:
            assert self[1].x_center > self.x_center, \
                f"Error: Out-of-order right child! {self.x_center}"
            self[1].verify(parents.union([self.x_center]))

    def __getitem__(self: Node, index: int) -> Node[K]:
        """
        Returns the left child if input is equivalent to False, or
        the right side otherwise.
        """
        if index:
            return self.right_node
        else:
            return self.left_node
    def __getitem__(self: Node, index: bool) -> Node[K]:
        """
        Returns the left child if input is equivalent to False, or
        the right side otherwise.
        """
        if index:
            return self.right_node
        else:
            return self.left_node
    def __setitem__(self: Node, key: bool, value: Node[K]):
        """Sets the left (0) or right (1) child."""
        if key:
            self.right_node = value
        else:
            self.left_node = value
    def __setitem__(self: Node, key: int, value: Node[K]):
        """Sets the left (0) or right (1) child."""
        if key:
            self.right_node = value
        else:
            self.left_node = value

    def __str__(self: Node):
        """
        Shows info about this node.

        Since Nodes are internal data structures not revealed to the
        user, I'm not bothering to make this copy-paste-executable as a
        constructor.
        """
        return f'Node<{self.x_center}, depth={self.depth}, balance={self.balance}>'
        #fieldcount = 'c_count,has_l,has_r = <{}, {}, {}>'.format(
        #    len(self.s_center),
        #    bool(self.left_node),
        #    bool(self.right_node)
        #)
        #fields = [self.x_center, self.balance, fieldcount]
        #return "Node({}, b={}, {})".format(*fields)

    def count_nodes(self):
        """
        Count the number of Nodes in this subtree.
        :rtype: int
        """
        count = 1
        if self.left_node:
            count += self.left_node.count_nodes()
        if self.right_node:
            count += self.right_node.count_nodes()
        return count

    def depth_score(self: Node, n, m):
        """
        Calculates flaws in balancing the tree.
        :param n: size of tree
        :param m: number of Nodes in tree
        :rtype: real
        """
        if n == 0:
            return 0.0

        # dopt is the optimal maximum depth of the tree
        dopt = 1 + int(floor(l2(m)))
        f = 1 / float(1 + n - dopt)
        return f * self.depth_score_helper(1, dopt)

    def depth_score_helper(self: Node, d, dopt) -> int:
        """
        Gets a weighted count of the number of Intervals deeper than dopt.
        :param d: current depth, starting from 0
        :param dopt: optimal maximum depth of a leaf Node
        :rtype: real
        """
        # di is how may levels deeper than optimal d is
        count = 0
        di = d - dopt
        if di > 0:
            count = di * len(self.s_center)

        if self.right_node:
            temp =  self.right_node.depth_score_helper(d + 1, dopt)
            count += temp
        if self.left_node:
            count += self.left_node.depth_score_helper(d + 1, dopt)
        return count

    def print_structure(self: Node, indent=0, tostring=False):
        """
        For debugging.
        """
        nl = '\n'
        sp = ''
        for i in range(0, indent):
            sp +=  '    '

        rlist = [str(self) + nl]
        if self.s_center:
            for iv in sorted(self.s_center):
                rlist.append(sp + ' ' + str(iv) + nl)
        if self.left_node:
            rlist.append(sp + '<:  ')  # no CR
            rlist.append(self.left_node.print_structure(indent + 1, True))
        if self.right_node:
            rlist.append(sp + '>:  ')  # no CR
            rlist.append(self.right_node.print_structure(indent + 1, True))
        result = ''.join(rlist)
        if tostring:
            return result
        else:
            print(result)
    