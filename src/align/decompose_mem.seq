# from home.hiseric1.seq.test.apps.avid.avid import *
import sys
# import bio.align
# import bio.bwt
from time import *
# from pair import *
from linked_list_node2 import *
# from bisect import bisect_left


def gap_size(e1,b2):
	return b2 - e1

gapLenForSW = 300
INDEX_CUTOFF = 0.1

SEARCH_MAX_EDIT_ERROR = 0.15
kmer_size = 10
min_mate_len = 50 # 100# 2# 100
min_mate_similarity = 0.6

def mark_visited( visited_array, begin, end ):
	# assert end - begin > min_mate_len
	# if (len(visited_array) == 22194):
	# 	print (len(visited_array), begin, end)
	for i in range(begin, end):
		# if visited_array[i]:
		# 	print (len(visited_array), begin, end)
		# 	num_visited = 0
		# 	for j in range(i, end):
		# 		if visited_array[j]:
		# 			num_visited += 1
		# 	print num_visited
			
		# 	if num_visited >100:
		# 		return False

			# return False
		# assert not visited_array[i] 
		visited_array[i] = True
	return True


def process(threads: Optional[Linked_list_node], visited, ref_list, ref_chr, walker_main, difference = 50, return_array = list[tuple[int,int,int, int]](), by_begin: bool = False):
	# print 'here'
	if by_begin:
		1
		return return_array
	else:
		# print threads
		# list in format: chr_id, begin, end

		# first_index = walker_main.first_ref_index
		# last_index = walker_main.first_ref_index + len(walker.query)
		# f_ = len(walker.query) - 1
		# while f_ > 0 and walker.query[f_] ==  walker.query[f_ -1]:
		#     f_ -= 1

		# assert last_index <= len( ref_list )

		walker = threads
		holder = threads
		# print len(ref_list)
		if len(ref_list) > 1:
			return_array.append((ref_chr, ref_list[0], ref_list[-1] - 1, len(ref_list)))
		
		ref_list.clear()
		while walker:
			# add extend here and dont return anything if only one elem in the list!
			
			if walker.query[-1] - walker.query[0] > min_mate_len:
				# mark_visited(visited[walker.chr_], walker.begin , walker.end )
				# print f'chr: {walker.chr_},  begn: {walker.begin}, end: {walker.end}, score: {walker.score}, len: {walker.end-walker.begin}, gap: {walker.gap}'
				# return_array.append((walker.chr_, walker.begin , walker.end, walker.score ))
				# if difference:
				# 	return_array.append((walker.chr_, walker.begin , walker.end - ( difference - walker.gap), walker.score ))
				# else:
				return_array.append((walker.chr_, walker.query[0] , walker.query[-1]  , walker.score ))

			# walker.begin = walker.end - ( difference - walker.gap)
			
			walker = walker.next
		# print 'here'
		# print (threads)
		# print (return_array)

		# print f'--, {return_array[0]}'
		# for i in return_array:
		#     print i

		if len(return_array) == 1:
			return list[tuple[int,int,int, int]]()
		else:
			for walker_ in return_array:
				# assert walker_[2] - walker_[1] > min_mate_len
				# print f'b,e:{ walker_[0]}, {walker_[1]} , {walker_[2]}'

				vs = mark_visited(visited[walker_[0]], walker_[1] , walker_[2] )
				# if not vs:
				# 	for i in return_array:
				# 		print i
				# 	assert False
		return sorted(return_array, reverse = True)




def add_to_tree_decompose(threads: Optional[Linked_list_node], minimizers_dict_list: list[tuple[int,int]], difference: int , return_array: list[list[ tuple[int,int,int, int]] ] = list[tuple[int,int,int]](), visited: list[list[bool]] = list[list[bool]](), ref_list: list[int] = list[int](), chr_ref: int = 0, old_node_count = 0 ): # -> Optional[Linked_list_node]:

	minimizer_index = len(minimizers_dict_list) - 1
	node_counter = 0
	# print(threads)
	# print (minimizers_dict_list)
	# print ('---')

	del_by_begin = False
	length = len(minimizers_dict_list)

	walker = threads
	previous = threads #threads
	previous = None
	holder = threads

	new_node_count = 0
	while threads and minimizer_index >= 0 and (minimizers_dict_list[minimizer_index][0] > threads.chr_ or (minimizers_dict_list[minimizer_index][0] == threads.chr_ and minimizers_dict_list[minimizer_index][1] > threads.query[-1] + difference )):
		if minimizer_index >= 0 and (visited[minimizers_dict_list[minimizer_index][0]][minimizers_dict_list[minimizer_index][1]] or (abs(ref_list[-1] - minimizers_dict_list[minimizer_index][1]) < difference and chr_ref == minimizers_dict_list[minimizer_index][0])):
			minimizer_index-=1
			continue

		walker = Linked_list_node([minimizers_dict_list[minimizer_index][1]], len(ref_list) - 1, minimizers_dict_list[minimizer_index][0], threads,0,1)

		walker.score += 1
		node_counter += 1
		if previous:

			previous.next = walker

		else:
			holder = walker
		# print f'Walk: {walker}'
		
		previous = walker
		minimizer_index-=1

	walker = threads
	threads = holder
	appended = False
	
	while walker:
		
		# if  minimizer_index >= 0 and minimizers_dict_list[minimizer_index][0] == 17  and minimizers_dict_list[minimizer_index][1] >= 183 and  minimizers_dict_list[minimizer_index][1] <= 527:
		# 	print minimizers_dict_list
		# print f'index: {minimizer_index}'
		# 	print walker
		# 	print '---'
		
		

		case_ = 0
		# if visited or it is actually reference location, just skip that one
		if minimizer_index >= 0 and (visited[minimizers_dict_list[minimizer_index][0]][minimizers_dict_list[minimizer_index][1]] or (abs( ref_list[-1] - minimizers_dict_list[minimizer_index][1] ) < difference and chr_ref == minimizers_dict_list[minimizer_index][0])):
			# print 1
			minimizer_index-=1
			continue
		# not appended and
		if not appended and minimizer_index >= 0 and walker.chr_ == minimizers_dict_list[minimizer_index][0] and ( walker.query[-1] ) < minimizers_dict_list[minimizer_index][1] and (walker.query[-1] + difference ) >= minimizers_dict_list[minimizer_index][1]:
			# print 2
			# this is case where we are appending new location on our node, append, and continue
			walker.query.append(minimizers_dict_list[minimizer_index][1])
			walker.score += 1
			walker.gap = 0
			walker.count+=1
			appended = True

			minimizer_index-=1
			continue
		elif minimizer_index >= 0 and walker.chr_ == minimizers_dict_list[minimizer_index][0] and (walker.query[-1] + difference ) >  minimizers_dict_list[minimizer_index][1] and walker.query[0] <= minimizers_dict_list[minimizer_index][1]:
			# print 3
			
			minimizer_index-=1
			walker.score += 1

			continue


		elif minimizer_index >= 0 and (not walker.next or walker.next.chr_ < minimizers_dict_list[minimizer_index][0] or (walker.next.chr_ == minimizers_dict_list[minimizer_index][0] and walker.next.query[-1] + difference < minimizers_dict_list[minimizer_index][1]) ):
			# print 4
			walker.insert_after(minimizers_dict_list[minimizer_index][1], len(ref_list) - 1, minimizers_dict_list[minimizer_index][0],1,1)
			walker.next.score += 1
			minimizer_index-=1
			
		
		walker.gap +=1
		walker.age += 1
		
		condition = walker.gap < difference

		if condition:
			walker.potentional = True
		elif not condition:
			if walker.potentional:
				if walker.query[-1] - walker.query[0] + kmer_size > min_mate_len: 
					del_by_begin = True
					temp_arr = process(threads, visited, ref_list, chr_ref, walker, difference )
					if len(temp_arr) > 0:
						return_array.append( temp_arr )
						del_by_begin = True
					# walker = None
					# holder = None
					# previous = None
					# while threads and threads.next:
					#     temp = threads.next
					#     threads.next = None
					#     threads = temp

					threads = None
					return threads, 0

			if walker is threads:
				help_ = threads.next
				threads.next = None
				threads = help_
				case_ = 1
			else:
				if walker.next is None:
					previous.next = None
				else:
					case_ = 3
					previous.next = walker.next
					walker.next = None
		if walker.query[-1] - walker.query[0] >= difference:
			new_node_count += 1
		if not appended:
			walker.query.append(walker.query[-1])
		appended = False
		if case_ == 3:
			walker = previous.next
		elif case_ == 1:
			walker = threads
		else:
			previous = walker
			walker = walker.next

	# if new_node_count > old_node_count:
	#     temp_arr = process(threads, visited, ref_list, chr_ref, walker, difference, by_begin = True)
	#     if len(temp_arr) > 0:
	#         return_array.append( temp_arr )


	while minimizer_index >= 0:
		if minimizer_index >= 0 and (visited[minimizers_dict_list[minimizer_index][0]][minimizers_dict_list[minimizer_index][1]] or (abs( ref_list[-1] - minimizers_dict_list[minimizer_index][1] ) < difference and chr_ref == minimizers_dict_list[minimizer_index][0])):
			minimizer_index-=1
			continue

		if not threads:
			threads = Linked_list_node([minimizers_dict_list[minimizer_index][1]], len(ref_list) - 1, minimizers_dict_list[minimizer_index][0], threads,1,1)
			# threads = Linked_list_node(minimizers_dict_list[minimizer_index][1], minimizers_dict_list[minimizer_index][1],minimizers_dict_list[minimizer_index][0], None, 1, 1)
			threads.score += 1
			previous = threads
		else:
			# previous.insert_after(minimizers_dict_list[minimizer_index][1],minimizers_dict_list[minimizer_index][0])
			previous.insert_after(minimizers_dict_list[minimizer_index][1], len(ref_list) - 1, minimizers_dict_list[minimizer_index][0])

			previous = previous.next
			previous.score += 1
		minimizer_index-=1

	return threads, new_node_count



def dict_align(s1, chr1, ref_dict: dict[int, list[tuple[int,int]]] = dict[int, list[tuple[int,int]]](), visited = list[bool] ()):

	step = 1
	loc = 0
	frequency = 0 

	for i in s1.kmers[Kmer[10]](step):
		visited.append(False)
		frequency += 1
		i_ = int(i.as_int())
		if i_ in ref_dict:
			ref_dict[i_].append((chr1,loc))
		else:
			ref_dict[i_] = [(chr1,loc)]
		loc += 1
	# print loc
	for i in range(9):
		visited.append(False)
	return frequency

def get_coverage(visited, croms):
	all = 0
	covered = 0
	for i_ in range(0, len(visited)):
		i = visited[i_]
		covered1 = 0
		for j in i:
			if j:
				covered1 += 1
		all += len(i)
		covered += covered1
		# print croms[i_], len(i), covered1
		
	return covered, all


def find_elems(s1:seq, begin, chr1, ref_dict, threshold = 1 << 31, best_nodes = list[list[ tuple[int,int,int,int]]](), visited = list[list[bool]] ()):
	loc = 0
	step = 1
	difference = 50

	helper = list[tuple[int,int]]()

	threads = None # Optional[Linked_list_node]() # Linked_list_node(0,0)
	
	max_val = 0
	avg = 0
	avg_count = 0
	visited_count = 0 
	inside = 0

	visited_count = 0 
	ref_list = list[int]()
	old_nodes_count = 0
	for i in s1.kmers[Kmer[10]](step):
		if not visited[chr1][loc]:
			ref_list.append( loc)
		# begin + 
		i_ = int(i.as_int())
		if len(ref_dict[i_]) >= threshold:
			# print 'skipped', i, loc, len(ref_dict[i_]) , threshold
			loc += step
			continue
		if visited[chr1][loc]:
			loc += step
			visited_count += 1
			# print f'Visited: {loc}, {i}, {threads}'
			if threads:
				inside += 1
				temp_arr = process(threads, visited, ref_list, chr1, threads , 0)
				if len(temp_arr) > 0:
					best_nodes.append( temp_arr )
				threads = None
			ref_list.clear()
			
			continue
		# if i_ in ref_dict:
		(threads, old_nodes_count) =  add_to_tree_decompose(threads, ref_dict[i_], difference,best_nodes, visited, ref_list, chr1, old_nodes_count)
		# print threads
		# if len(ref_dict[i_]) > max_val:
		# 	max_val = len(ref_dict[i_])
		# avg += len(ref_dict[i_])
		# avg_count +=1
		# print f'Cur loc: {loc}'
		loc += step

	


	walker = threads
	temp_arr = process(threads, visited, ref_list, chr1, threads , 0)

	if len(temp_arr) > 0:
		best_nodes.append( temp_arr )

	# print max_val, avg_count, avg, avg / avg_count
	threads = None
	walker = None
	# for i in best_nodes:
	# 	print i
	# return threads

from bio.fasta import *

def is_mergeable(elem_set1, elem_set2, max_gap = 1000):
	return_list = []
	if len(elem_set1) == len(elem_set2):
		for i in range(len(elem_set1)):
			# print f'here: {elem_set1[i]};;;; {elem_set2[i]}, {len(elem_set1)}'
			if ( elem_set1[i][0] == elem_set2[i][0] and elem_set1[i][2] <= elem_set2[i][1] and elem_set1[i][2] + max_gap >= elem_set2[i][1] ):
				return_list.append( (elem_set1[i][0], elem_set1[i][1] , elem_set2[i][2], elem_set1[i][3] + elem_set2[i][3]) )
				# return return_list
			else:
				break
		if len(return_list) == len(elem_set2):
			return return_list
		else:
			return []

	return []


def merge(elementary_set):
	return_list = [elementary_set[0]]
	for elem_i in range(1,len(elementary_set)):
		rez = is_mergeable(return_list[-1], elementary_set[elem_i])
		if rez != []:
			return_list[-1] = rez
		else:
			return_list.append(elementary_set[elem_i])

	return return_list


def decompose(path_to_fa1,destination_path = 'test', fai = True, outpt_filename=''):

	counter = 0
	failed_ = 0

	croms = dict[int, str]()
	croms_rev = dict[str, int]()

	fr = FASTA(path_to_fa1, fai = fai)
	ref_dict = dict[int, list[tuple[int,int]]]()

	# dict_seqc = dict[str, seq]()

	visited = list[list[bool]]()
	frequency = 0
	# first we create dictionary
	with timing('creating dict'):
		# for i in  FASTA(path_to_fa1):
		for i in FASTA(path_to_fa1, fai = fai):
			visited.append(list[bool]())

			croms[counter] = i.name
			croms_rev[i.name] = counter
			frequency += dict_align(i.seq, counter, ref_dict, visited[-1])
			# dict_seqc[i.name] = i.seq

			counter += 1

		# break


	if destination_path[-1] != '/':
		destination_path+= '/'
	name = path_to_fa1.split('/')[-1].split('.')[0] if outpt_filename == '' else outpt_filename
	print f'{destination_path}{name}.bed'
	output = open(f'{destination_path}{name}.bed','w') #if outpt_filename == '' else outpt_filename

	count = 0
	count2 = 0
	chunks = 800

	hist = dict[int,int]()
	for i in ref_dict:
		if not len(ref_dict[i]) in hist:
			hist[ len(ref_dict[i]) ] = 1
		else:
			hist[len(ref_dict[i])] += 1
			
	ignore = int( frequency - (frequency * INDEX_CUTOFF) / 100 )

	sum = 0
	threshold = 1 << 31
	filtered = 0
	# here we calculate threshold which tells us what is maximum length of a list of kmers
	for i in sorted(hist.keys()):
		sum += hist[i] * i
		if sum <= ignore:
			threshold = i

	# fr.close()

	if threshold < 100:
		threshold = 1 << 31
	print f'Threshold is: {threshold}'
	count3 = 0
	count4 = 0
	with timing('Finding elementaries'):

		# for i in  FASTA(path_to_fa1):
		
		for i in FASTA(path_to_fa1, fai = fai):
			best_nodes = list[list[ tuple[int,int,int, int]]]()

			with timing(f'{count}, {len(i.seq)}'):
				# print count, len(i.seq)
				count2 += len(i.seq)
				# begin = int( i.name.split('_')[1] )
				find_elems(i.seq, int( i.name.split('-')[1] ), croms_rev[i.name], ref_dict, threshold, best_nodes, visited)

			if len(best_nodes) > 0:
				best_nodes = merge(best_nodes)
			
			for elementary_set in best_nodes:
				
				for elem in elementary_set:
					# print f'chr: {elem[0]}/ {croms[elem[0]]}, current: {croms_rev[i.name]}/{i.name}, start: {elem[1]}, end: {elem[2]}, score: {elem[3]}, len: {elem[2] - elem[1]}'
					# seqcss = f'{dict_seqc[croms[elem[0]]][elem[1]:elem[2]]}'
					chrom_ext, begin, end = croms[elem[0]].split('-')
					chrom = chrom_ext[:-1]
					# s = f'{croms[elem[0]]}//{elem[0]}\t{int(begin) +elem[1] }\t{int(begin) + elem[2]}\t{name}_{count3}\t{elem[2] - elem[1]}\tcurrent{croms_rev[i.name]}/{i.name}'
					strand = chrom_ext[-1]
					if strand == '+':
						output.write(f'{chrom}\t{int(begin) +elem[1] }\t{int(begin) + elem[2]}\t{name}_{count3}\t{elem[2] - elem[1]}\t{elem[3]}\t{strand}\n')
						# output.write(f'{dict_seqc[croms[elem[0]]][elem[1]:elem[2]]}\n')

					else:
						output.write(f'{chrom}\t{int(end) - elem[2] }\t{int(end) - elem[1]}\t{name}_{count3}\t{elem[2] - elem[1]}\t{elem[3]}\t{strand}\n')
						# output.write(f'{dict_seqc[croms[elem[0]]][elem[1]:elem[2]]}\n')


					# print (s)
					count4 += 1
				count3 += 1
				# print f'END OF ONE ELEM SET --------------- {count3}'

			count += 1
			# print f'COunt: {count}'
			# if count == 1:
			# 	break
			
	# print ref_dict
	output.close()
	cov, all = get_coverage(visited, croms)
	print f'Elementary sets: {count3}\nAll elementaries: {count4}\nCovered: {cov}\nAll: {all}, So far: {count2}'
	


def main():
	if len(sys.argv) == 1:
		# decompose('/home/hiseric1/new_sedef/biser/src/results/5_all/sdregions/SD_regions_hg19.fa', 'results/', True)
		# decompose('results/test_elems/elems_test.fa', 'results/test_elems/')
		# decompose('/home/hiseric1/new_sedef/biser/src/results/5_all/same/hg19_hg19/colors_fas/7.fa', 'results/', True)

		# decompose('/home/hiseric1/new_sedef/biser/src/results/5_all/same/hg19_hg19/colors_fas/786.fa', 'results/', True)
		decompose('/home/hiseric1/new_sedef/biser/src/align/results/test1/4/116.fa', 'results/test/', True)

		
		# decompose('/home/hiseric1/new_sedef/biser/src/results/5_all/same/hg19_hg19/colors_fas/1863.fa', 'results/', True)
		# decompose('/home/hiseric1/new_sedef/biser/src/align/results/test1/0/0.fa', 'results/', True) 

	elif len(sys.argv) == 2:
		decompose(sys.argv[1], 'results/')
	elif len(sys.argv) == 3:
		decompose(sys.argv[1], sys.argv[2])
	elif len(sys.argv) == 4:
		for i in range (int(sys.argv[3])):
			bin_num = sys.argv[1].split('/')[-1].split('.')[0]
			decompose(f'{sys.argv[1]}/{i}.fa', sys.argv[2], True, f'{bin_num}_{i}')
main()



# def main2():
# 	path = '/home/hiseric1/new_sedef/biser/src/results/5_all/same/hg19_hg19/colors_fas/'

