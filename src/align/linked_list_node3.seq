
class Linked_list_node:
    query: list[int]

    ref: list[int]
    lens: list[int]


    chr_: int
    age: int
    count: int
    gap: int
    inner_gap: int

    
    next: Optional[Linked_list_node]
    previous: Optional[Linked_list_node]



    potentional: bool
    score: int
    
    
    def __init__(self: Linked_list_node, query: list[int], ref:list[int],lens: list[int], chr_:int,next: Optional[Linked_list_node], previous: Optional[Linked_list_node], age: int,count: int, potentional: bool, score:int, gap:int, inner_gap:int):
        
        self.query = query
        self.ref = ref
        self.lens = lens

        self.chr_ = chr_
        self.next = next
        self.previous = previous
        self.age = age
        self.count = count
        self.potentional = potentional
        self.score = score
        self.gap = gap
        self.inner_gap = inner_gap


    def __init__(self: Linked_list_node, first: int, ref:int, chr_:int):
        
        self.query = [first]
        self.ref = [ref]
        self.lens = [10]

        self.chr_ = chr_
        self.next = None
        self.previous = None
        self.age = 0
        self.count = 0
        self.potentional = False
        self.score = 0
        self.gap = 0
        self.inner_gap = 0

    def __init__(self: Linked_list_node, first: int, ref:int,chr_:int, next_: Optional[Linked_list_node], previous: Optional[Linked_list_node]):
        self.query = [first]
        self.ref = [ref]
        self.lens = [10]
        self.chr_ = chr_
        self.next = next_
        self.previous = previous
        self.age = 0
        self.count = 0
        self.potentional = False
        self.score = 0
        self.gap = 0
        self.inner_gap = 0
    def __init__(self: Linked_list_node, first: int, last:int, ref:int,chr_:int, next_: Optional[Linked_list_node],  previous: Optional[Linked_list_node], age:int, count:int):
        self.query = [first]
        self.ref = [ref]
        self.lens = [10]
        self.chr_ = chr_

        self.next = next_
        self.previous = previous

        self.age = age
        self.count = count
        self.potentional = False
        self.score = 0
        self.gap = 0
        self.inner_gap = 0

    def insert_after(self: Linked_list_node, first: int, ref: int,chr_:int, age: int = 1, count:int = 1):
        new_node = Linked_list_node(first,first, ref,chr_, self.next, self,age,count)
        # new_node.previous = self
        if self.next:
            self.next.previous = new_node
        self.next = new_node
    
    def insert_after2(self: Linked_list_node, query: list[int], ref:list[int], lens: list[int], chr_:int,next: Optional[Linked_list_node], age: int,count: int, potentional: bool, score:int, gap:int, inner_gap:int):
        new_node = Linked_list_node(query,ref,lens,chr_, self.next, self,age,count,potentional,score,gap,inner_gap)
        if self.next:
            self.next.previous = new_node
        self.next = new_node
        

    # def insert_after_node(self: Linked_list_node,other:Linked_list_node):
    #     self.next = other
    def __str__(self: Linked_list_node):
        s=""
        walker = self
        while walker:
            s+=f'({walker.query}; ref: {walker.ref}; lens: {walker.lens}; {walker.age}/{walker.count}; {walker.potentional}/ score: {walker.score}/ {walker.inner_gap}, {walker.gap})->'
            walker = walker.next
        return s
    def __len__(self: Linked_list_node):
        i = 0
        walker = self

        while walker:
            i+=1
            walker = walker.next
        return i

    def overlaps(self:Linked_list_node, other:Linked_list_node) -> bool:
        if self.query[0] <= other.query[-1] and self.query[-1] >= other.query[0] and self.ref[0] <= other.ref[-1] and self.ref[-1] >= other.ref[0]:
            return True
        return False

    def overlaps_one(self:Linked_list_node, other:Linked_list_node) -> bool:
        if (self.query[0] <= other.query[-1] and self.query[-1] >= other.query[0]) or (self.ref[0] <= other.ref[-1] and self.ref[-1] >= other.ref[0]):
            return True
        return False
    
    def overlaps_more(self:Linked_list_node, other:Linked_list_node, percentage: float) -> bool:
        if self.overlaps(other):
            s1_q = self.query[0]
            e1_q = self.query[-1] + self.lens[-1]
            len1 = e1_q - s1_q

            s2_q = other.query[0]
            e2_q = other.query[-1] + self.lens[-1]
            min1 = min(e1_q, e2_q)
            max1 = max(s1_q, s2_q)
            diff1 = min1 - max1
            sim_1 = diff1 / len1 >= percentage
            if not sim_1:
                return False

            # now for ref
            s1_q = self.ref[0]
            e1_q = self.ref[-1] + self.lens[-1]
            len1 = e1_q - s1_q

            s2_q = other.ref[0]
            e2_q = other.ref[-1] + self.lens[-1]
            min1 = min(e1_q, e2_q)
            max1 = max(s1_q, s2_q)
            diff1 = min1 - max1
            sim_2 = diff1 / len1 >= percentage

            if sim_1 and sim_2:
                return True
            return False
        
        return False

    def overlaps_more_one(self:Linked_list_node, other:Linked_list_node, percentage: float) -> bool:
        if self.overlaps_one(other):
            s1_q = self.query[0]
            e1_q = self.query[-1] + self.lens[-1]
            len1 = e1_q - s1_q

            s2_q = other.query[0]
            e2_q = other.query[-1] + self.lens[-1]
            min1 = min(e1_q, e2_q)
            max1 = max(s1_q, s2_q)
            diff1 = min1 - max1
            sim_1 = diff1 / len1 >= percentage
            # print  sim_1, min1, max1, s1_q, e1_q
            if sim_1:
                return True

            # now for ref
            s1_q = self.ref[0]
            e1_q = self.ref[-1] + self.lens[-1]
            len1 = e1_q - s1_q

            s2_q = other.ref[0]
            e2_q = other.ref[-1] + self.lens[-1]
            min1 = min(e1_q, e2_q)
            max1 = max(s1_q, s2_q)
            diff1 = min1 - max1
            sim_2 = diff1 / len1 >= percentage

            if sim_2:
                return True
        
        return False
    def cont_1(self:Linked_list_node, other: Linked_list_node):
        if (self.query[-1] + self.lens[-1] >= other.query[-1] + other.lens[-1] and self.query[0] <= other.query[0] and self.ref[0] <= other.ref[0] and self.ref[-1]  + self.lens[-1]  >= other.ref[-1]  + other.lens[-1] ) or (other.overlaps_more(self,0.9)):
            return True
        return False

    
    # def __gt__(self:Linked_list_node, other: Linked_list_node):
    #     return len(self.query) > len(other.query)
    
    # def __eq__(self: Linked_list_node, other: Linked_list_node)-> bool:
    #     return self.query[0] == other.query[0] and self.ref[0] == other.ref[0] and self.query[-1] == other.query[-1] and self.ref[-1] == other.ref[-1] and len(self.query) == len(other.query)

    # def __lt__(self: Linked_list_node, other: Linked_list_node)-> bool:
    #     return (self.query[0], self.query[-1] + self.lens[-1],self.ref[0], self.ref[-1] + self.lens[-1] ) < (other.query[0], other.query[-1] + other.lens[-1],other.ref[0], other.ref[-1] + other.lens[-1] ) 

    # def __ge__(self: Linked_list_node, other: Linked_list_node)-> bool:
    #     return (self.query[0], self.query[-1] + self.lens[-1],self.ref[0], self.ref[-1] + self.lens[-1] ) >= (other.query[0], other.query[-1] + other.lens[-1],other.ref[0], other.ref[-1] + other.lens[-1] ) 
    # def __le__(self: Linked_list_node, other: Linked_list_node) -> bool:
    #     return (self.query[0], self.query[-1] + self.lens[-1],self.ref[0], self.ref[-1] + self.lens[-1] ) <= (other.query[0], other.query[-1] + other.lens[-1],other.ref[0], other.ref[-1] + other.lens[-1] ) 

    def __gt__(self:Linked_list_node, other: Linked_list_node):
        return ( self.query[0] + ( self.query[0] + self.ref[0]) / 2 ) >  other.query[0] +( other.query[0] + other.ref[0]) / 2
    def __eq__(self: Linked_list_node, other: Linked_list_node)-> bool:
        return self.query[0] == other.query[0] and self.ref[0] == other.ref[0] and self.query[-1] == other.query[-1] and self.ref[-1] == other.ref[-1] and len(self.query) == len(other.query)

    def __lt__(self: Linked_list_node, other: Linked_list_node)-> bool:
        return ( self.query[0] + ( self.query[0] + self.ref[0]) / 2 ) <  other.query[0] +( other.query[0] + other.ref[0]) / 2

    def __ge__(self: Linked_list_node, other: Linked_list_node)-> bool:
        return ( self.query[0] + ( self.query[0] + self.ref[0]) / 2 ) >=  other.query[0] +( other.query[0] + other.ref[0]) / 2

    def __le__(self: Linked_list_node, other: Linked_list_node) -> bool:
        return ( self.query[0] + ( self.query[0] + self.ref[0]) / 2 ) <=  other.query[0] +( other.query[0] + other.ref[0]) / 2




    def swap(self: Linked_list_node, other: Linked_list_node):
        self.ref, other.ref = other.ref, self.ref
        self.query, other.query = other.query, self.query
        self.lens, other.lens = other.lens, self.lens

        self.chr_, other.chr_ = other.chr_, self.chr_

        self.age, other.age = other.age, self.age
        self.count, other.count = other.count, self.count
        self.gap, other.gap = other.gap, self.gap
        self.inner_gap, other.inner_gap = other.inner_gap, self.inner_gap
        self.potentional, other.potentional = other.potentional, self.potentional
        self.score, other.score = other.score, self.score






        

